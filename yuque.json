[
  {
    "id": 26561960,
    "slug": "twucvp",
    "title": "jsdelivr缓存刷新",
    "book_id": 8869358,
    "book": {
      "id": 8869358,
      "type": "Book",
      "slug": "qcznxa",
      "name": "dustessbot",
      "user_id": 10380742,
      "description": "",
      "creator_id": 10380742,
      "public": 1,
      "items_count": 1,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2020-12-28T09:54:41.646Z",
      "updated_at": "2020-12-28T09:54:46.000Z",
      "created_at": "2020-12-28T09:53:09.000Z",
      "namespace": "constown/qcznxa",
      "user": {
        "id": 10380742,
        "type": "User",
        "login": "constown",
        "name": "ConstOwn",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-12-28T08:44:20.000Z",
        "updated_at": "2020-12-28T09:53:10.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 10380742,
    "creator": {
      "id": 10380742,
      "type": "User",
      "login": "constown",
      "name": "ConstOwn",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-12-28T08:44:20.000Z",
      "updated_at": "2020-12-28T09:53:10.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "---\n\n\ntitle: 解决jsdelivr缓存问题的几个办法<br />\ntags:\n\n- 博客搭建\n- CDN\n- jsdelivr<br />\ncategories:\n- \n\n   - 解决方案\n- \n\n   - 博客搭建<br />\ndescription: 优雅解决jsdelivr缓存问题<br />\ntop_img: '[https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg](https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg)'<br />\ncover: '[https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200723212429.png](https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200723212429.png)'<br />\nabbrlink: cbcd1946<br />\ndate: 2020-07-23 21:23:13<br />\nupdated: 2020-07-28 07:23:13\n\n---\n\n<a name=\"df368884\"></a>\n## 前言\n\nhexo 博客目前最常用的加速方案应该就是使用 `jsdelivr` + `github` 的方式了，免费还好用，我的博客的图片也基本上是使用了这种方式 。\n\n关于如何使用 `jsdelivr` 来加速 `hexo` 博客我已经不想再赘述了。\n\n如果你对此不太了解，你可以参考：[优雅使用 jsdeliver 加速文件](https://www.antmoe.com/posts/e33d1c55/index.html)\n\n<a name=\"58ad486f\"></a>\n## 缓存问题\n\n因为 CSS 样式，随着博客的更新，可能经常调整，所以我需要经常改动和发布后实时预览线上环境是否和我测试环境一致，所以我会选择 `完全忽略该版本或使用“最新”加载最新版本` 这样的方式\n\n```\nhttps://cdn.jsdelivr.net/gh/jquery/jquery@latest/dist/jquery.min.js\nhttps://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js\n```\n\n我在尝试使用 `jsdelivr` 来加速我博客引入的自定义的 CSS 文件时，遇到了这样的问题：\n\n- 第一次上传可以正常引入文件\n- 随后我对 CSS 的样式再次进行了修改，上传到 github 仓库，引入失败（确切的说，引入的文件并没有更新，仍然是我第一次提交的内容）\n- 此后，通过 `jsdelivr` 加速的文件，一直没有刷新成为我的最新版本。\n- 这让我的博客无法立即更新线上环境的样式。\n\n在使用这种方法的时候，我们使用的 `latest` 这个 tags，官网上说，在引用 CDN 的时候版本号可以省略，但经过尝试，发现不带版本号并不会指向正确的版本，甚至有些资源文件会报 404，因为这部分资源文件回滚以后发现还是没有，所以就会出现上面的情况，我最先想到的还是把这个版本号固定下来，这样就不用每次都去修改配置文件，这样又引入一个新问题，即：每次部署的时候都要先删除远程的 latest，这实在是让人有点烦躁。\n\n<a name=\"81c1dff6\"></a>\n## 解决办法\n\n<a name=\"8a1f2bfa\"></a>\n### 本地引入\n\n{% note danger %}\n\n以下教程只针对 `butterfly` 主题，其他主题使用对应的本地引入 css 文件的方式应该即可。\n\n{% endnote %}\n\n在 `source` 文件夹下新建 `style` 文件夹用于存放我们的样式(不推荐使用 `CSS` 作为文件名 )，然后在配置文件中使用本地引入的方式即可：\n\n```yaml\ninject:\n  head:\n    - <link rel=\"stylesheet\" href=\"/style/xxx.css\">\n  bottom:\n    # - <script src=\"xxxx\"></script>\n```\n\n当然这种方法与我们的初衷似乎有些违背。\n\n<a name=\"56f7a686\"></a>\n### 启用又拍云或者其他云储存服务\n\n我目前使用的是 又拍云，把文件上传到 又拍云的 云储存 服务就好。实测是上传了可以实时刷新。\n\n关于如何使用 云储存 服务，这里暂时先不赘述。\n\n<a name=\"467663e9\"></a>\n### jsdelivr 缓存\n\n`jsdelive` 的缓存机制，我目前仍然不清楚，`jsdelivr` 官网是这么叙述的：\n\n> We use a permanent S3 storage to ensure all files remain available even if GitHub goes down, or a repository or a release is deleted by its author. Files are fetched directly from GitHub only the first time, or when S3 goes down.\n\n> 大概意思：我们使用永久性的 S3 存储，以确保即使 GitHub 发生故障，或者其作者删除了存储库或发行版，所有文件仍然可用。仅在第一次或 S3 故障时才直接从 GitHub 提取文件。\n\n\n> If you use this feature and a file you requested is not available in the newest release, the link will keep working thanks to our version-fallback feature. We'll continue to serve the file from older release instead of failing with a 404 error.\n\n> 大概意思：如果您使用此功能，但您所请求的文件在最新版本中不可用，则由于我们的版本回退功能，该链接将继续有效。我们将继续提供较旧版本的文件，而不是因为 404 错误而失败。\n\n\n我想这大概率就是在 `push` 了代码后，但是 `jsdelivr` 加速的文件没有更新的原因。\n\n当然 **第一种解决办法** 就是，你每改动一次代码，就 `releases` 一次，用更换版本号的形式来解决：\n\n```\nhttps://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js\n```\n\n但是或许还是有一些麻烦？因为你或许还要修改配置文件中对应的 CDN 地址。\n\n我想，既然 `jsdelivr` 提供了一个 `完全忽略该版本或使用“最新”加载最新版本` 这样的引入方式，那应该就是支持 `实时刷新` 的，如果请求的文件一直未获得刷新，我个人觉得可能是因为 CDN 节点上的缓存资源并没有刷新，就和浏览器的缓存同一个道理，在我们本地调试的时候，修改了样式却没有变化的时候，我们总是想到的是清理一下浏览器的缓存。\n\n如何清理 `jsdelivr` 缓存？\n\n把链接地址中的 `cdn` 换成 `purge` 即可清除指定文件的缓存，（经过测试，这个方法也是有时候好用有时候不好用）\n\n```\nhttps://purge.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js\n```\n\n但是官方好像并没有提到这一点，我找了很久的文档，官方是这么说的：\n\n> jsDelivr 具有易于使用的 API，可以从缓存中清除文件并强制更新文件。当您发布新版本并要强制更新所有版本别名用户时，此功能很有用。\n\n> 为避免滥用，在发出电子邮件请求后（现在为[-dak@prospectone.io](mailto:dak@prospectone.io)）可以访问清除功能。\n\n\n<a name=\"daad12b7\"></a>\n## jsDelivr API\n\n查看 CDN 上的 tags 和 versisons 列表。\n\n用法：\n\n```\n/package/npm/:name\n - name: npm package name\n\n/package/gh/:user/:repo\n - user: GitHub username\n - repo: GitHub repository name\n```\n\n示例：\n\n```\nhttps://data.jsdelivr.com/v1/package/npm/jquery\n\n//=>\n{\n    \"tags\": {\n        \"beta\": \"3.2.1\",\n        \"latest\": \"3.2.1\"\n    },\n    \"versions\": [\n        \"3.2.1\",\n        \"3.2.0\",\n        \"3.1.1\",\n        ...\n    ]\n}\n```\n\n更多的接口请直接访问：[jsDelivr API](https://github.com/jsdelivr/data.jsdelivr.com)\n\n<a name=\"433531fd\"></a>\n## 结语\n\n以上，就是目前我能想到的应对 `jsdelivr` 缓存问题的所有方法了，总结如下：\n\n- 直接使用本地引入（简单粗暴）\n- 使用其他 云储存服务 来加速（可能会收费）\n- 使用版本号的方式来引入（直接好用）\n- `purge` 刷新缓存（似乎也不太稳定）\n",
    "body_draft": "---\n\n\ntitle: 解决jsdelivr缓存问题的几个办法<br />\ntags:\n\n- 博客搭建\n- CDN\n- jsdelivr<br />\ncategories:\n- \n\n   - 解决方案\n- \n\n   - 博客搭建<br />\ndescription: 优雅解决jsdelivr缓存问题<br />\ntop_img: '[https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg](https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg)'<br />\ncover: '[https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200723212429.png](https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200723212429.png)'<br />\nabbrlink: cbcd1946<br />\ndate: 2020-07-23 21:23:13<br />\nupdated: 2020-07-28 07:23:13\n\n---\n\n<a name=\"df368884\"></a>\n## 前言\n\nhexo 博客目前最常用的加速方案应该就是使用 `jsdelivr` + `github` 的方式了，免费还好用，我的博客的图片也基本上是使用了这种方式 。\n\n关于如何使用 `jsdelivr` 来加速 `hexo` 博客我已经不想再赘述了。\n\n如果你对此不太了解，你可以参考：[优雅使用 jsdeliver 加速文件](https://www.antmoe.com/posts/e33d1c55/index.html)\n\n<a name=\"58ad486f\"></a>\n## 缓存问题\n\n因为 CSS 样式，随着博客的更新，可能经常调整，所以我需要经常改动和发布后实时预览线上环境是否和我测试环境一致，所以我会选择 `完全忽略该版本或使用“最新”加载最新版本` 这样的方式\n\n```\nhttps://cdn.jsdelivr.net/gh/jquery/jquery@latest/dist/jquery.min.js\nhttps://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js\n```\n\n我在尝试使用 `jsdelivr` 来加速我博客引入的自定义的 CSS 文件时，遇到了这样的问题：\n\n- 第一次上传可以正常引入文件\n- 随后我对 CSS 的样式再次进行了修改，上传到 github 仓库，引入失败（确切的说，引入的文件并没有更新，仍然是我第一次提交的内容）\n- 此后，通过 `jsdelivr` 加速的文件，一直没有刷新成为我的最新版本。\n- 这让我的博客无法立即更新线上环境的样式。\n\n在使用这种方法的时候，我们使用的 `latest` 这个 tags，官网上说，在引用 CDN 的时候版本号可以省略，但经过尝试，发现不带版本号并不会指向正确的版本，甚至有些资源文件会报 404，因为这部分资源文件回滚以后发现还是没有，所以就会出现上面的情况，我最先想到的还是把这个版本号固定下来，这样就不用每次都去修改配置文件，这样又引入一个新问题，即：每次部署的时候都要先删除远程的 latest，这实在是让人有点烦躁。\n\n<a name=\"81c1dff6\"></a>\n## 解决办法\n\n<a name=\"8a1f2bfa\"></a>\n### 本地引入\n\n{% note danger %}\n\n以下教程只针对 `butterfly` 主题，其他主题使用对应的本地引入 css 文件的方式应该即可。\n\n{% endnote %}\n\n在 `source` 文件夹下新建 `style` 文件夹用于存放我们的样式(不推荐使用 `CSS` 作为文件名 )，然后在配置文件中使用本地引入的方式即可：\n\n```yaml\ninject:\n  head:\n    - <link rel=\"stylesheet\" href=\"/style/xxx.css\">\n  bottom:\n    # - <script src=\"xxxx\"></script>\n```\n\n当然这种方法与我们的初衷似乎有些违背。\n\n<a name=\"56f7a686\"></a>\n### 启用又拍云或者其他云储存服务\n\n我目前使用的是 又拍云，把文件上传到 又拍云的 云储存 服务就好。实测是上传了可以实时刷新。\n\n关于如何使用 云储存 服务，这里暂时先不赘述。\n\n<a name=\"467663e9\"></a>\n### jsdelivr 缓存\n\n`jsdelive` 的缓存机制，我目前仍然不清楚，`jsdelivr` 官网是这么叙述的：\n\n> We use a permanent S3 storage to ensure all files remain available even if GitHub goes down, or a repository or a release is deleted by its author. Files are fetched directly from GitHub only the first time, or when S3 goes down.\n\n> 大概意思：我们使用永久性的 S3 存储，以确保即使 GitHub 发生故障，或者其作者删除了存储库或发行版，所有文件仍然可用。仅在第一次或 S3 故障时才直接从 GitHub 提取文件。\n\n\n> If you use this feature and a file you requested is not available in the newest release, the link will keep working thanks to our version-fallback feature. We'll continue to serve the file from older release instead of failing with a 404 error.\n\n> 大概意思：如果您使用此功能，但您所请求的文件在最新版本中不可用，则由于我们的版本回退功能，该链接将继续有效。我们将继续提供较旧版本的文件，而不是因为 404 错误而失败。\n\n\n我想这大概率就是在 `push` 了代码后，但是 `jsdelivr` 加速的文件没有更新的原因。\n\n当然 **第一种解决办法** 就是，你每改动一次代码，就 `releases` 一次，用更换版本号的形式来解决：\n\n```\nhttps://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js\n```\n\n但是或许还是有一些麻烦？因为你或许还要修改配置文件中对应的 CDN 地址。\n\n我想，既然 `jsdelivr` 提供了一个 `完全忽略该版本或使用“最新”加载最新版本` 这样的引入方式，那应该就是支持 `实时刷新` 的，如果请求的文件一直未获得刷新，我个人觉得可能是因为 CDN 节点上的缓存资源并没有刷新，就和浏览器的缓存同一个道理，在我们本地调试的时候，修改了样式却没有变化的时候，我们总是想到的是清理一下浏览器的缓存。\n\n如何清理 `jsdelivr` 缓存？\n\n把链接地址中的 `cdn` 换成 `purge` 即可清除指定文件的缓存，（经过测试，这个方法也是有时候好用有时候不好用）\n\n```\nhttps://purge.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js\n```\n\n但是官方好像并没有提到这一点，我找了很久的文档，官方是这么说的：\n\n> jsDelivr 具有易于使用的 API，可以从缓存中清除文件并强制更新文件。当您发布新版本并要强制更新所有版本别名用户时，此功能很有用。\n\n> 为避免滥用，在发出电子邮件请求后（现在为[-dak@prospectone.io](mailto:dak@prospectone.io)）可以访问清除功能。\n\n\n<a name=\"daad12b7\"></a>\n## jsDelivr API\n\n查看 CDN 上的 tags 和 versisons 列表。\n\n用法：\n\n```\n/package/npm/:name\n - name: npm package name\n\n/package/gh/:user/:repo\n - user: GitHub username\n - repo: GitHub repository name\n```\n\n示例：\n\n```\nhttps://data.jsdelivr.com/v1/package/npm/jquery\n\n//=>\n{\n    \"tags\": {\n        \"beta\": \"3.2.1\",\n        \"latest\": \"3.2.1\"\n    },\n    \"versions\": [\n        \"3.2.1\",\n        \"3.2.0\",\n        \"3.1.1\",\n        ...\n    ]\n}\n```\n\n更多的接口请直接访问：[jsDelivr API](https://github.com/jsdelivr/data.jsdelivr.com)\n\n<a name=\"433531fd\"></a>\n## 结语\n\n以上，就是目前我能想到的应对 `jsdelivr` 缓存问题的所有方法了，总结如下：\n\n- 直接使用本地引入（简单粗暴）\n- 使用其他 云储存服务 来加速（可能会收费）\n- 使用版本号的方式来引入（直接好用）\n- `purge` 刷新缓存（似乎也不太稳定）\n",
    "body_html": "<!doctype html><hr /><p><br /></p><p>title: 解决jsdelivr缓存问题的几个办法<br />\ntags:</p><p><br /></p><ul><li>博客搭建</li></ul><ul><li>CDN</li></ul><ul><li>jsdelivr<br />\ncategories:</li></ul><ul><li>\n</li></ul><ul data-lake-indent=\"1\"><li>解决方案</li></ul>\n<ul><li>\n</li></ul><ul data-lake-indent=\"1\"><li>博客搭建<br />\ndescription: 优雅解决jsdelivr缓存问题<br />\ntop_img: '<a href=\"https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg\" target=\"_blank\">https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg</a>'<br />\ncover: '<a href=\"https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200723212429.png\" target=\"_blank\">https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200723212429.png</a>'<br />\nabbrlink: cbcd1946<br />\ndate: 2020-07-23 21:23:13<br />\nupdated: 2020-07-28 07:23:13</li></ul>\n<hr /><a name=\"前言\"></a><h2 id=\"df368884\">前言</h2><p><br /></p><p>hexo 博客目前最常用的加速方案应该就是使用 <code>jsdelivr</code> + <code>github</code> 的方式了，免费还好用，我的博客的图片也基本上是使用了这种方式 。</p><p><br /></p><p>关于如何使用 <code>jsdelivr</code> 来加速 <code>hexo</code> 博客我已经不想再赘述了。</p><p><br /></p><p>如果你对此不太了解，你可以参考：<a href=\"https://www.antmoe.com/posts/e33d1c55/index.html\" target=\"_blank\">优雅使用 jsdeliver 加速文件</a></p><p><br /></p><a name=\"缓存问题\"></a><h2 id=\"58ad486f\">缓存问题</h2><p><br /></p><p>因为 CSS 样式，随着博客的更新，可能经常调整，所以我需要经常改动和发布后实时预览线上环境是否和我测试环境一致，所以我会选择 <code>完全忽略该版本或使用“最新”加载最新版本</code> 这样的方式</p><p><br /></p><pre><code>https://cdn.jsdelivr.net/gh/jquery/jquery@latest/dist/jquery.min.js\nhttps://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</code></pre><p><br /></p><p>我在尝试使用 <code>jsdelivr</code> 来加速我博客引入的自定义的 CSS 文件时，遇到了这样的问题：</p><p><br /></p><ul><li>第一次上传可以正常引入文件</li></ul><ul><li>随后我对 CSS 的样式再次进行了修改，上传到 github 仓库，引入失败（确切的说，引入的文件并没有更新，仍然是我第一次提交的内容）</li></ul><ul><li>此后，通过 <code>jsdelivr</code> 加速的文件，一直没有刷新成为我的最新版本。</li></ul><ul><li>这让我的博客无法立即更新线上环境的样式。</li></ul><p><br /></p><p>在使用这种方法的时候，我们使用的 <code>latest</code> 这个 tags，官网上说，在引用 CDN 的时候版本号可以省略，但经过尝试，发现不带版本号并不会指向正确的版本，甚至有些资源文件会报 404，因为这部分资源文件回滚以后发现还是没有，所以就会出现上面的情况，我最先想到的还是把这个版本号固定下来，这样就不用每次都去修改配置文件，这样又引入一个新问题，即：每次部署的时候都要先删除远程的 latest，这实在是让人有点烦躁。</p><p><br /></p><a name=\"解决办法\"></a><h2 id=\"81c1dff6\">解决办法</h2><p><br /></p><a name=\"本地引入\"></a><h3 id=\"8a1f2bfa\">本地引入</h3><p><br /></p><p>{% note danger %}</p><p><br /></p><p>以下教程只针对 <code>butterfly</code> 主题，其他主题使用对应的本地引入 css 文件的方式应该即可。</p><p><br /></p><p>{% endnote %}</p><p><br /></p><p>在 <code>source</code> 文件夹下新建 <code>style</code> 文件夹用于存放我们的样式(不推荐使用 <code>CSS</code> 作为文件名 )，然后在配置文件中使用本地引入的方式即可：</p><p><br /></p><pre data-lang=\"yaml\"><code>inject:\n  head:\n    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/style/xxx.css&quot;&gt;\n  bottom:\n    # - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</code></pre><p><br /></p><p>当然这种方法与我们的初衷似乎有些违背。</p><p><br /></p><a name=\"启用又拍云或者其他云储存服务\"></a><h3 id=\"56f7a686\">启用又拍云或者其他云储存服务</h3><p><br /></p><p>我目前使用的是 又拍云，把文件上传到 又拍云的 云储存 服务就好。实测是上传了可以实时刷新。</p><p><br /></p><p>关于如何使用 云储存 服务，这里暂时先不赘述。</p><p><br /></p><a name=\"jsdelivr-缓存\"></a><h3 id=\"467663e9\">jsdelivr 缓存</h3><p><br /></p><p><code>jsdelive</code> 的缓存机制，我目前仍然不清楚，<code>jsdelivr</code> 官网是这么叙述的：</p><p><br /></p><blockquote><p>We use a permanent S3 storage to ensure all files remain available even if GitHub goes down, or a repository or a release is deleted by its author. Files are fetched directly from GitHub only the first time, or when S3 goes down.</p>\n<p>大概意思：我们使用永久性的 S3 存储，以确保即使 GitHub 发生故障，或者其作者删除了存储库或发行版，所有文件仍然可用。仅在第一次或 S3 故障时才直接从 GitHub 提取文件。</p></blockquote><p><br /></p><blockquote><p>If you use this feature and a file you requested is not available in the newest release, the link will keep working thanks to our version-fallback feature. We'll continue to serve the file from older release instead of failing with a 404 error.</p>\n<p>大概意思：如果您使用此功能，但您所请求的文件在最新版本中不可用，则由于我们的版本回退功能，该链接将继续有效。我们将继续提供较旧版本的文件，而不是因为 404 错误而失败。</p></blockquote><p><br /></p><p>我想这大概率就是在 <code>push</code> 了代码后，但是 <code>jsdelivr</code> 加速的文件没有更新的原因。</p><p><br /></p><p>当然 <strong>第一种解决办法</strong> 就是，你每改动一次代码，就 <code>releases</code> 一次，用更换版本号的形式来解决：</p><p><br /></p><pre><code>https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js</code></pre><p><br /></p><p>但是或许还是有一些麻烦？因为你或许还要修改配置文件中对应的 CDN 地址。</p><p><br /></p><p>我想，既然 <code>jsdelivr</code> 提供了一个 <code>完全忽略该版本或使用“最新”加载最新版本</code> 这样的引入方式，那应该就是支持 <code>实时刷新</code> 的，如果请求的文件一直未获得刷新，我个人觉得可能是因为 CDN 节点上的缓存资源并没有刷新，就和浏览器的缓存同一个道理，在我们本地调试的时候，修改了样式却没有变化的时候，我们总是想到的是清理一下浏览器的缓存。</p><p><br /></p><p>如何清理 <code>jsdelivr</code> 缓存？</p><p><br /></p><p>把链接地址中的 <code>cdn</code> 换成 <code>purge</code> 即可清除指定文件的缓存，（经过测试，这个方法也是有时候好用有时候不好用）</p><p><br /></p><pre><code>https://purge.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</code></pre><p><br /></p><p>但是官方好像并没有提到这一点，我找了很久的文档，官方是这么说的：</p><p><br /></p><blockquote><p>jsDelivr 具有易于使用的 API，可以从缓存中清除文件并强制更新文件。当您发布新版本并要强制更新所有版本别名用户时，此功能很有用。</p>\n<p>为避免滥用，在发出电子邮件请求后（现在为<a href=\"mailto:dak@prospectone.io\" target=\"_blank\">-dak@prospectone.io</a>）可以访问清除功能。</p></blockquote><p><br /></p><a name=\"jsDelivr-API\"></a><h2 id=\"daad12b7\">jsDelivr API</h2><p><br /></p><p>查看 CDN 上的 tags 和 versisons 列表。</p><p><br /></p><p>用法：</p><p><br /></p><pre><code>/package/npm/:name\n - name: npm package name\n\n/package/gh/:user/:repo\n - user: GitHub username\n - repo: GitHub repository name</code></pre><p><br /></p><p>示例：</p><p><br /></p><pre><code>https://data.jsdelivr.com/v1/package/npm/jquery\n\n//=&gt;\n{\n    &quot;tags&quot;: {\n        &quot;beta&quot;: &quot;3.2.1&quot;,\n        &quot;latest&quot;: &quot;3.2.1&quot;\n    },\n    &quot;versions&quot;: [\n        &quot;3.2.1&quot;,\n        &quot;3.2.0&quot;,\n        &quot;3.1.1&quot;,\n        ...\n    ]\n}</code></pre><p><br /></p><p>更多的接口请直接访问：<a href=\"https://github.com/jsdelivr/data.jsdelivr.com\" target=\"_blank\">jsDelivr API</a></p><p><br /></p><a name=\"结语\"></a><h2 id=\"433531fd\">结语</h2><p><br /></p><p>以上，就是目前我能想到的应对 <code>jsdelivr</code> 缓存问题的所有方法了，总结如下：</p><p><br /></p><ul><li>直接使用本地引入（简单粗暴）</li></ul><ul><li>使用其他 云储存服务 来加速（可能会收费）</li></ul><ul><li>使用版本号的方式来引入（直接好用）</li></ul><ul><li><code>purge</code> 刷新缓存（似乎也不太稳定）</li></ul>",
    "body_lake": "<!doctype lake><card type=\"block\" name=\"hr\"></card><p><br /></p><p>title: 解决jsdelivr缓存问题的几个办法<br />\ntags:</p><p><br /></p><ul><li>博客搭建</li></ul><ul><li>CDN</li></ul><ul><li>jsdelivr<br />\ncategories:</li></ul><ul><li>\n</li></ul><ul data-lake-indent=\"1\"><li>解决方案</li></ul>\n<ul><li>\n</li></ul><ul data-lake-indent=\"1\"><li>博客搭建<br />\ndescription: 优雅解决jsdelivr缓存问题<br />\ntop_img: '<a href=\"https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg\" target=\"_blank\">https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg</a>'<br />\ncover: '<a href=\"https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200723212429.png\" target=\"_blank\">https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200723212429.png</a>'<br />\nabbrlink: cbcd1946<br />\ndate: 2020-07-23 21:23:13<br />\nupdated: 2020-07-28 07:23:13</li></ul>\n<card type=\"block\" name=\"hr\"></card><a name=\"前言\"></a><h2 id=\"df368884\">前言</h2><p><br /></p><p>hexo 博客目前最常用的加速方案应该就是使用 <code>jsdelivr</code> + <code>github</code> 的方式了，免费还好用，我的博客的图片也基本上是使用了这种方式 。</p><p><br /></p><p>关于如何使用 <code>jsdelivr</code> 来加速 <code>hexo</code> 博客我已经不想再赘述了。</p><p><br /></p><p>如果你对此不太了解，你可以参考：<a href=\"https://www.antmoe.com/posts/e33d1c55/index.html\" target=\"_blank\">优雅使用 jsdeliver 加速文件</a></p><p><br /></p><a name=\"缓存问题\"></a><h2 id=\"58ad486f\">缓存问题</h2><p><br /></p><p>因为 CSS 样式，随着博客的更新，可能经常调整，所以我需要经常改动和发布后实时预览线上环境是否和我测试环境一致，所以我会选择 <code>完全忽略该版本或使用“最新”加载最新版本</code> 这样的方式</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22166a752e%22%2C%22code%22%3A%22https%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%40latest%2Fdist%2Fjquery.min.js%5Cnhttps%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%2Fdist%2Fjquery.min.js%22%7D\"></card><p><br /></p><p>我在尝试使用 <code>jsdelivr</code> 来加速我博客引入的自定义的 CSS 文件时，遇到了这样的问题：</p><p><br /></p><ul><li>第一次上传可以正常引入文件</li></ul><ul><li>随后我对 CSS 的样式再次进行了修改，上传到 github 仓库，引入失败（确切的说，引入的文件并没有更新，仍然是我第一次提交的内容）</li></ul><ul><li>此后，通过 <code>jsdelivr</code> 加速的文件，一直没有刷新成为我的最新版本。</li></ul><ul><li>这让我的博客无法立即更新线上环境的样式。</li></ul><p><br /></p><p>在使用这种方法的时候，我们使用的 <code>latest</code> 这个 tags，官网上说，在引用 CDN 的时候版本号可以省略，但经过尝试，发现不带版本号并不会指向正确的版本，甚至有些资源文件会报 404，因为这部分资源文件回滚以后发现还是没有，所以就会出现上面的情况，我最先想到的还是把这个版本号固定下来，这样就不用每次都去修改配置文件，这样又引入一个新问题，即：每次部署的时候都要先删除远程的 latest，这实在是让人有点烦躁。</p><p><br /></p><a name=\"解决办法\"></a><h2 id=\"81c1dff6\">解决办法</h2><p><br /></p><a name=\"本地引入\"></a><h3 id=\"8a1f2bfa\">本地引入</h3><p><br /></p><p>{% note danger %}</p><p><br /></p><p>以下教程只针对 <code>butterfly</code> 主题，其他主题使用对应的本地引入 css 文件的方式应该即可。</p><p><br /></p><p>{% endnote %}</p><p><br /></p><p>在 <code>source</code> 文件夹下新建 <code>style</code> 文件夹用于存放我们的样式(不推荐使用 <code>CSS</code> 作为文件名 )，然后在配置文件中使用本地引入的方式即可：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22fd1fec01%22%2C%22mode%22%3A%22yaml%22%2C%22code%22%3A%22inject%3A%5Cn%20%20head%3A%5Cn%20%20%20%20-%20%3Clink%20rel%3D%5C%22stylesheet%5C%22%20href%3D%5C%22%2Fstyle%2Fxxx.css%5C%22%3E%5Cn%20%20bottom%3A%5Cn%20%20%20%20%23%20-%20%3Cscript%20src%3D%5C%22xxxx%5C%22%3E%3C%2Fscript%3E%22%7D\"></card><p><br /></p><p>当然这种方法与我们的初衷似乎有些违背。</p><p><br /></p><a name=\"启用又拍云或者其他云储存服务\"></a><h3 id=\"56f7a686\">启用又拍云或者其他云储存服务</h3><p><br /></p><p>我目前使用的是 又拍云，把文件上传到 又拍云的 云储存 服务就好。实测是上传了可以实时刷新。</p><p><br /></p><p>关于如何使用 云储存 服务，这里暂时先不赘述。</p><p><br /></p><a name=\"jsdelivr-缓存\"></a><h3 id=\"467663e9\">jsdelivr 缓存</h3><p><br /></p><p><code>jsdelive</code> 的缓存机制，我目前仍然不清楚，<code>jsdelivr</code> 官网是这么叙述的：</p><p><br /></p><blockquote><p>We use a permanent S3 storage to ensure all files remain available even if GitHub goes down, or a repository or a release is deleted by its author. Files are fetched directly from GitHub only the first time, or when S3 goes down.</p>\n<p>大概意思：我们使用永久性的 S3 存储，以确保即使 GitHub 发生故障，或者其作者删除了存储库或发行版，所有文件仍然可用。仅在第一次或 S3 故障时才直接从 GitHub 提取文件。</p></blockquote><p><br /></p><blockquote><p>If you use this feature and a file you requested is not available in the newest release, the link will keep working thanks to our version-fallback feature. We'll continue to serve the file from older release instead of failing with a 404 error.</p>\n<p>大概意思：如果您使用此功能，但您所请求的文件在最新版本中不可用，则由于我们的版本回退功能，该链接将继续有效。我们将继续提供较旧版本的文件，而不是因为 404 错误而失败。</p></blockquote><p><br /></p><p>我想这大概率就是在 <code>push</code> 了代码后，但是 <code>jsdelivr</code> 加速的文件没有更新的原因。</p><p><br /></p><p>当然 <strong>第一种解决办法</strong> 就是，你每改动一次代码，就 <code>releases</code> 一次，用更换版本号的形式来解决：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22af45879a%22%2C%22code%22%3A%22https%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%403.2.1%2Fdist%2Fjquery.min.js%22%7D\"></card><p><br /></p><p>但是或许还是有一些麻烦？因为你或许还要修改配置文件中对应的 CDN 地址。</p><p><br /></p><p>我想，既然 <code>jsdelivr</code> 提供了一个 <code>完全忽略该版本或使用“最新”加载最新版本</code> 这样的引入方式，那应该就是支持 <code>实时刷新</code> 的，如果请求的文件一直未获得刷新，我个人觉得可能是因为 CDN 节点上的缓存资源并没有刷新，就和浏览器的缓存同一个道理，在我们本地调试的时候，修改了样式却没有变化的时候，我们总是想到的是清理一下浏览器的缓存。</p><p><br /></p><p>如何清理 <code>jsdelivr</code> 缓存？</p><p><br /></p><p>把链接地址中的 <code>cdn</code> 换成 <code>purge</code> 即可清除指定文件的缓存，（经过测试，这个方法也是有时候好用有时候不好用）</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%221126849a%22%2C%22code%22%3A%22https%3A%2F%2Fpurge.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%2Fdist%2Fjquery.min.js%22%7D\"></card><p><br /></p><p>但是官方好像并没有提到这一点，我找了很久的文档，官方是这么说的：</p><p><br /></p><blockquote><p>jsDelivr 具有易于使用的 API，可以从缓存中清除文件并强制更新文件。当您发布新版本并要强制更新所有版本别名用户时，此功能很有用。</p>\n<p>为避免滥用，在发出电子邮件请求后（现在为<a href=\"mailto:dak@prospectone.io\" target=\"_blank\">-dak@prospectone.io</a>）可以访问清除功能。</p></blockquote><p><br /></p><a name=\"jsDelivr-API\"></a><h2 id=\"daad12b7\">jsDelivr API</h2><p><br /></p><p>查看 CDN 上的 tags 和 versisons 列表。</p><p><br /></p><p>用法：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2212c5ab55%22%2C%22code%22%3A%22%2Fpackage%2Fnpm%2F%3Aname%5Cn%20-%20name%3A%20npm%20package%20name%5Cn%5Cn%2Fpackage%2Fgh%2F%3Auser%2F%3Arepo%5Cn%20-%20user%3A%20GitHub%20username%5Cn%20-%20repo%3A%20GitHub%20repository%20name%22%7D\"></card><p><br /></p><p>示例：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22236894ed%22%2C%22code%22%3A%22https%3A%2F%2Fdata.jsdelivr.com%2Fv1%2Fpackage%2Fnpm%2Fjquery%5Cn%5Cn%2F%2F%3D%3E%5Cn%7B%5Cn%20%20%20%20%5C%22tags%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22beta%5C%22%3A%20%5C%223.2.1%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22latest%5C%22%3A%20%5C%223.2.1%5C%22%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%5C%22versions%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%5C%223.2.1%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%223.2.0%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%223.1.1%5C%22%2C%5Cn%20%20%20%20%20%20%20%20...%5Cn%20%20%20%20%5D%5Cn%7D%22%7D\"></card><p><br /></p><p>更多的接口请直接访问：<a href=\"https://github.com/jsdelivr/data.jsdelivr.com\" target=\"_blank\">jsDelivr API</a></p><p><br /></p><a name=\"结语\"></a><h2 id=\"433531fd\">结语</h2><p><br /></p><p>以上，就是目前我能想到的应对 <code>jsdelivr</code> 缓存问题的所有方法了，总结如下：</p><p><br /></p><ul><li>直接使用本地引入（简单粗暴）</li></ul><ul><li>使用其他 云储存服务 来加速（可能会收费）</li></ul><ul><li>使用版本号的方式来引入（直接好用）</li></ul><ul><li><code>purge</code> 刷新缓存（似乎也不太稳定）</li></ul>",
    "body_draft_lake": "<!doctype lake><card type=\"block\" name=\"hr\"></card><p><br /></p><p>title: 解决jsdelivr缓存问题的几个办法<br />\ntags:</p><p><br /></p><ul><li>博客搭建</li></ul><ul><li>CDN</li></ul><ul><li>jsdelivr<br />\ncategories:</li></ul><ul><li>\n</li></ul><ul data-lake-indent=\"1\"><li>解决方案</li></ul>\n<ul><li>\n</li></ul><ul data-lake-indent=\"1\"><li>博客搭建<br />\ndescription: 优雅解决jsdelivr缓存问题<br />\ntop_img: '<a href=\"https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg\" target=\"_blank\">https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg</a>'<br />\ncover: '<a href=\"https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200723212429.png\" target=\"_blank\">https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200723212429.png</a>'<br />\nabbrlink: cbcd1946<br />\ndate: 2020-07-23 21:23:13<br />\nupdated: 2020-07-28 07:23:13</li></ul>\n<card type=\"block\" name=\"hr\"></card><a name=\"前言\"></a><h2 id=\"df368884\">前言</h2><p><br /></p><p>hexo 博客目前最常用的加速方案应该就是使用 <code>jsdelivr</code> + <code>github</code> 的方式了，免费还好用，我的博客的图片也基本上是使用了这种方式 。</p><p><br /></p><p>关于如何使用 <code>jsdelivr</code> 来加速 <code>hexo</code> 博客我已经不想再赘述了。</p><p><br /></p><p>如果你对此不太了解，你可以参考：<a href=\"https://www.antmoe.com/posts/e33d1c55/index.html\" target=\"_blank\">优雅使用 jsdeliver 加速文件</a></p><p><br /></p><a name=\"缓存问题\"></a><h2 id=\"58ad486f\">缓存问题</h2><p><br /></p><p>因为 CSS 样式，随着博客的更新，可能经常调整，所以我需要经常改动和发布后实时预览线上环境是否和我测试环境一致，所以我会选择 <code>完全忽略该版本或使用“最新”加载最新版本</code> 这样的方式</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22166a752e%22%2C%22code%22%3A%22https%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%40latest%2Fdist%2Fjquery.min.js%5Cnhttps%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%2Fdist%2Fjquery.min.js%22%7D\"></card><p><br /></p><p>我在尝试使用 <code>jsdelivr</code> 来加速我博客引入的自定义的 CSS 文件时，遇到了这样的问题：</p><p><br /></p><ul><li>第一次上传可以正常引入文件</li></ul><ul><li>随后我对 CSS 的样式再次进行了修改，上传到 github 仓库，引入失败（确切的说，引入的文件并没有更新，仍然是我第一次提交的内容）</li></ul><ul><li>此后，通过 <code>jsdelivr</code> 加速的文件，一直没有刷新成为我的最新版本。</li></ul><ul><li>这让我的博客无法立即更新线上环境的样式。</li></ul><p><br /></p><p>在使用这种方法的时候，我们使用的 <code>latest</code> 这个 tags，官网上说，在引用 CDN 的时候版本号可以省略，但经过尝试，发现不带版本号并不会指向正确的版本，甚至有些资源文件会报 404，因为这部分资源文件回滚以后发现还是没有，所以就会出现上面的情况，我最先想到的还是把这个版本号固定下来，这样就不用每次都去修改配置文件，这样又引入一个新问题，即：每次部署的时候都要先删除远程的 latest，这实在是让人有点烦躁。</p><p><br /></p><a name=\"解决办法\"></a><h2 id=\"81c1dff6\">解决办法</h2><p><br /></p><a name=\"本地引入\"></a><h3 id=\"8a1f2bfa\">本地引入</h3><p><br /></p><p>{% note danger %}</p><p><br /></p><p>以下教程只针对 <code>butterfly</code> 主题，其他主题使用对应的本地引入 css 文件的方式应该即可。</p><p><br /></p><p>{% endnote %}</p><p><br /></p><p>在 <code>source</code> 文件夹下新建 <code>style</code> 文件夹用于存放我们的样式(不推荐使用 <code>CSS</code> 作为文件名 )，然后在配置文件中使用本地引入的方式即可：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22fd1fec01%22%2C%22mode%22%3A%22yaml%22%2C%22code%22%3A%22inject%3A%5Cn%20%20head%3A%5Cn%20%20%20%20-%20%3Clink%20rel%3D%5C%22stylesheet%5C%22%20href%3D%5C%22%2Fstyle%2Fxxx.css%5C%22%3E%5Cn%20%20bottom%3A%5Cn%20%20%20%20%23%20-%20%3Cscript%20src%3D%5C%22xxxx%5C%22%3E%3C%2Fscript%3E%22%7D\"></card><p><br /></p><p>当然这种方法与我们的初衷似乎有些违背。</p><p><br /></p><a name=\"启用又拍云或者其他云储存服务\"></a><h3 id=\"56f7a686\">启用又拍云或者其他云储存服务</h3><p><br /></p><p>我目前使用的是 又拍云，把文件上传到 又拍云的 云储存 服务就好。实测是上传了可以实时刷新。</p><p><br /></p><p>关于如何使用 云储存 服务，这里暂时先不赘述。</p><p><br /></p><a name=\"jsdelivr-缓存\"></a><h3 id=\"467663e9\">jsdelivr 缓存</h3><p><br /></p><p><code>jsdelive</code> 的缓存机制，我目前仍然不清楚，<code>jsdelivr</code> 官网是这么叙述的：</p><p><br /></p><blockquote><p>We use a permanent S3 storage to ensure all files remain available even if GitHub goes down, or a repository or a release is deleted by its author. Files are fetched directly from GitHub only the first time, or when S3 goes down.</p>\n<p>大概意思：我们使用永久性的 S3 存储，以确保即使 GitHub 发生故障，或者其作者删除了存储库或发行版，所有文件仍然可用。仅在第一次或 S3 故障时才直接从 GitHub 提取文件。</p></blockquote><p><br /></p><blockquote><p>If you use this feature and a file you requested is not available in the newest release, the link will keep working thanks to our version-fallback feature. We'll continue to serve the file from older release instead of failing with a 404 error.</p>\n<p>大概意思：如果您使用此功能，但您所请求的文件在最新版本中不可用，则由于我们的版本回退功能，该链接将继续有效。我们将继续提供较旧版本的文件，而不是因为 404 错误而失败。</p></blockquote><p><br /></p><p>我想这大概率就是在 <code>push</code> 了代码后，但是 <code>jsdelivr</code> 加速的文件没有更新的原因。</p><p><br /></p><p>当然 <strong>第一种解决办法</strong> 就是，你每改动一次代码，就 <code>releases</code> 一次，用更换版本号的形式来解决：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22af45879a%22%2C%22code%22%3A%22https%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%403.2.1%2Fdist%2Fjquery.min.js%22%7D\"></card><p><br /></p><p>但是或许还是有一些麻烦？因为你或许还要修改配置文件中对应的 CDN 地址。</p><p><br /></p><p>我想，既然 <code>jsdelivr</code> 提供了一个 <code>完全忽略该版本或使用“最新”加载最新版本</code> 这样的引入方式，那应该就是支持 <code>实时刷新</code> 的，如果请求的文件一直未获得刷新，我个人觉得可能是因为 CDN 节点上的缓存资源并没有刷新，就和浏览器的缓存同一个道理，在我们本地调试的时候，修改了样式却没有变化的时候，我们总是想到的是清理一下浏览器的缓存。</p><p><br /></p><p>如何清理 <code>jsdelivr</code> 缓存？</p><p><br /></p><p>把链接地址中的 <code>cdn</code> 换成 <code>purge</code> 即可清除指定文件的缓存，（经过测试，这个方法也是有时候好用有时候不好用）</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%221126849a%22%2C%22code%22%3A%22https%3A%2F%2Fpurge.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%2Fdist%2Fjquery.min.js%22%7D\"></card><p><br /></p><p>但是官方好像并没有提到这一点，我找了很久的文档，官方是这么说的：</p><p><br /></p><blockquote><p>jsDelivr 具有易于使用的 API，可以从缓存中清除文件并强制更新文件。当您发布新版本并要强制更新所有版本别名用户时，此功能很有用。</p>\n<p>为避免滥用，在发出电子邮件请求后（现在为<a href=\"mailto:dak@prospectone.io\" target=\"_blank\">-dak@prospectone.io</a>）可以访问清除功能。</p></blockquote><p><br /></p><a name=\"jsDelivr-API\"></a><h2 id=\"daad12b7\">jsDelivr API</h2><p><br /></p><p>查看 CDN 上的 tags 和 versisons 列表。</p><p><br /></p><p>用法：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2212c5ab55%22%2C%22code%22%3A%22%2Fpackage%2Fnpm%2F%3Aname%5Cn%20-%20name%3A%20npm%20package%20name%5Cn%5Cn%2Fpackage%2Fgh%2F%3Auser%2F%3Arepo%5Cn%20-%20user%3A%20GitHub%20username%5Cn%20-%20repo%3A%20GitHub%20repository%20name%22%7D\"></card><p><br /></p><p>示例：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22236894ed%22%2C%22code%22%3A%22https%3A%2F%2Fdata.jsdelivr.com%2Fv1%2Fpackage%2Fnpm%2Fjquery%5Cn%5Cn%2F%2F%3D%3E%5Cn%7B%5Cn%20%20%20%20%5C%22tags%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22beta%5C%22%3A%20%5C%223.2.1%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22latest%5C%22%3A%20%5C%223.2.1%5C%22%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%5C%22versions%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%5C%223.2.1%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%223.2.0%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%223.1.1%5C%22%2C%5Cn%20%20%20%20%20%20%20%20...%5Cn%20%20%20%20%5D%5Cn%7D%22%7D\"></card><p><br /></p><p>更多的接口请直接访问：<a href=\"https://github.com/jsdelivr/data.jsdelivr.com\" target=\"_blank\">jsDelivr API</a></p><p><br /></p><a name=\"结语\"></a><h2 id=\"433531fd\">结语</h2><p><br /></p><p>以上，就是目前我能想到的应对 <code>jsdelivr</code> 缓存问题的所有方法了，总结如下：</p><p><br /></p><ul><li>直接使用本地引入（简单粗暴）</li></ul><ul><li>使用其他 云储存服务 来加速（可能会收费）</li></ul><ul><li>使用版本号的方式来引入（直接好用）</li></ul><ul><li><code>purge</code> 刷新缓存（似乎也不太稳定）</li></ul>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2020-12-28T09:54:41.000Z",
    "deleted_at": null,
    "created_at": "2020-12-28T09:54:41.000Z",
    "updated_at": "2020-12-29T02:00:44.000Z",
    "published_at": "2020-12-28T09:54:41.000Z",
    "first_published_at": "2020-12-28T09:54:41.000Z",
    "word_count": 1659,
    "cover": null,
    "description": null,
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 26581123,
    "slug": "lavwp3",
    "title": "bolg_post",
    "book_id": 8869358,
    "book": {
      "id": 8869358,
      "type": "Book",
      "slug": "qcznxa",
      "name": "dustessbot",
      "user_id": 10380742,
      "description": "",
      "creator_id": 10380742,
      "public": 1,
      "items_count": 1,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2020-12-29T02:04:38.329Z",
      "updated_at": "2020-12-29T02:04:38.000Z",
      "created_at": "2020-12-28T09:53:09.000Z",
      "namespace": "constown/qcznxa",
      "user": {
        "id": 10380742,
        "type": "User",
        "login": "constown",
        "name": "ConstOwn",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "books_count": 1,
        "public_books_count": 1,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2020-12-28T08:44:20.000Z",
        "updated_at": "2020-12-28T09:53:10.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 10380742,
    "creator": {
      "id": 10380742,
      "type": "User",
      "login": "constown",
      "name": "ConstOwn",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "books_count": 1,
      "public_books_count": 1,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-12-28T08:44:20.000Z",
      "updated_at": "2020-12-28T09:53:10.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "---<br />title: Vue基于html2canvas实现HTML页面生成为图片并下载的功能及清晰度优化<br />tags:<br />  - CSS<br />categories:<br />  - - 前端<br />    - 前端笔记<br />description: 在Vue中基于html2canvas和Canvas2Image实现HTML页面生成为图片并下载的功能，并解决了一些文本丢失或者图片加载不全的问题，跨域配置，以及清晰度优化等等。<br />keywords: html2canvas，HTML页面生成为图片，下载，图片加载不全，文本丢失<br />top_img: 'https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg'<br />cover: 'https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20201113115021.png'<br />abbrlink: 558885cd<br />date: 2020-11-13 11:36:33<br />updated: 2020-11-13 11:36:33<br />---<br />\n\n<a name=\"kurLP\"></a>\n## 前言\nhexo 博客目前最常用的加速方案应该就是使用 `jsdelivr` + `github` 的方式了，免费还好用，我的博客的图片也基本上是使用了这种方式 。<br />\n<br />关于如何使用 `jsdelivr` 来加速 `hexo` 博客我已经不想再赘述了。<br />\n<br />如果你对此不太了解，你可以参考：[优雅使用 jsdeliver 加速文件](https://www.antmoe.com/posts/e33d1c55/index.html)<br />\n\n<a name=\"58ad486f\"></a>\n## 缓存问题\n\n<br />因为 CSS 样式，随着博客的更新，可能经常调整，所以我需要经常改动和发布后实时预览线上环境是否和我测试环境一致，所以我会选择 `完全忽略该版本或使用“最新”加载最新版本` 这样的方式<br />\n\n```\nhttps://cdn.jsdelivr.net/gh/jquery/jquery@latest/dist/jquery.min.js\nhttps://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js\n```\n\n<br />我在尝试使用 `jsdelivr` 来加速我博客引入的自定义的 CSS 文件时，遇到了这样的问题：<br />\n\n- 第一次上传可以正常引入文件\n- 随后我对 CSS 的样式再次进行了修改，上传到 github 仓库，引入失败（确切的说，引入的文件并没有更新，仍然是我第一次提交的内容）\n- 此后，通过 `jsdelivr` 加速的文件，一直没有刷新成为我的最新版本。\n- 这让我的博客无法立即更新线上环境的样式。\n\n\n<br />在使用这种方法的时候，我们使用的 `latest` 这个 tags，官网上说，在引用 CDN 的时候版本号可以省略，但经过尝试，发现不带版本号并不会指向正确的版本，甚至有些资源文件会报 404，因为这部分资源文件回滚以后发现还是没有，所以就会出现上面的情况，我最先想到的还是把这个版本号固定下来，这样就不用每次都去修改配置文件，这样又引入一个新问题，即：每次部署的时候都要先删除远程的 latest，这实在是让人有点烦躁。<br />\n\n<a name=\"81c1dff6\"></a>\n## 解决办法\n\n\n<a name=\"8a1f2bfa\"></a>\n### 本地引入\n\n<br />{% note danger %}<br />\n<br />以下教程只针对 `butterfly` 主题，其他主题使用对应的本地引入 css 文件的方式应该即可。<br />\n<br />{% endnote %}<br />\n<br />在 `source` 文件夹下新建 `style` 文件夹用于存放我们的样式(不推荐使用 `CSS` 作为文件名 )，然后在配置文件中使用本地引入的方式即可：<br />\n\n```yaml\ninject:\n  head:\n    - <link rel=\"stylesheet\" href=\"/style/xxx.css\">\n  bottom:\n    # - <script src=\"xxxx\"></script>\n```\n\n<br />当然这种方法与我们的初衷似乎有些违背。<br />\n\n<a name=\"56f7a686\"></a>\n### 启用又拍云或者其他云储存服务\n\n<br />我目前使用的是 又拍云，把文件上传到 又拍云的 云储存 服务就好。实测是上传了可以实时刷新。<br />\n<br />关于如何使用 云储存 服务，这里暂时先不赘述。<br />\n\n<a name=\"467663e9\"></a>\n### jsdelivr 缓存\n\n<br />`jsdelive` 的缓存机制，我目前仍然不清楚，`jsdelivr` 官网是这么叙述的：<br />\n\n> We use a permanent S3 storage to ensure all files remain available even if GitHub goes down, or a repository or a release is deleted by its author. Files are fetched directly from GitHub only the first time, or when S3 goes down.\n> 大概意思：我们使用永久性的 S3 存储，以确保即使 GitHub 发生故障，或者其作者删除了存储库或发行版，所有文件仍然可用。仅在第一次或 S3 故障时才直接从 GitHub 提取文件。\n\n\n\n> If you use this feature and a file you requested is not available in the newest release, the link will keep working thanks to our version-fallback feature. We'll continue to serve the file from older release instead of failing with a 404 error.\n> 大概意思：如果您使用此功能，但您所请求的文件在最新版本中不可用，则由于我们的版本回退功能，该链接将继续有效。我们将继续提供较旧版本的文件，而不是因为 404 错误而失败。\n\n\n<br />我想这大概率就是在 `push` 了代码后，但是 `jsdelivr` 加速的文件没有更新的原因。<br />\n<br />当然 **第一种解决办法** 就是，你每改动一次代码，就 `releases` 一次，用更换版本号的形式来解决：<br />\n\n```\nhttps://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js\n```\n\n<br />但是或许还是有一些麻烦？因为你或许还要修改配置文件中对应的 CDN 地址。<br />\n<br />我想，既然 `jsdelivr` 提供了一个 `完全忽略该版本或使用“最新”加载最新版本` 这样的引入方式，那应该就是支持 `实时刷新` 的，如果请求的文件一直未获得刷新，我个人觉得可能是因为 CDN 节点上的缓存资源并没有刷新，就和浏览器的缓存同一个道理，在我们本地调试的时候，修改了样式却没有变化的时候，我们总是想到的是清理一下浏览器的缓存。<br />\n<br />如何清理 `jsdelivr` 缓存？<br />\n<br />把链接地址中的 `cdn` 换成 `purge` 即可清除指定文件的缓存，（经过测试，这个方法也是有时候好用有时候不好用）<br />\n\n```\nhttps://purge.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js\n```\n\n<br />但是官方好像并没有提到这一点，我找了很久的文档，官方是这么说的：<br />\n\n> jsDelivr 具有易于使用的 API，可以从缓存中清除文件并强制更新文件。当您发布新版本并要强制更新所有版本别名用户时，此功能很有用。\n> 为避免滥用，在发出电子邮件请求后（现在为[-dak@prospectone.io](mailto:dak@prospectone.io)）可以访问清除功能。\n\n\n\n<a name=\"daad12b7\"></a>\n## jsDelivr API\n\n<br />查看 CDN 上的 tags 和 versisons 列表。<br />\n<br />用法：<br />\n\n```\n/package/npm/:name\n - name: npm package name\n\n/package/gh/:user/:repo\n - user: GitHub username\n - repo: GitHub repository name\n```\n\n<br />示例：<br />\n\n```\nhttps://data.jsdelivr.com/v1/package/npm/jquery\n\n//=>\n{\n    \"tags\": {\n        \"beta\": \"3.2.1\",\n        \"latest\": \"3.2.1\"\n    },\n    \"versions\": [\n        \"3.2.1\",\n        \"3.2.0\",\n        \"3.1.1\",\n        ...\n    ]\n}\n```\n\n<br />更多的接口请直接访问：[jsDelivr API](https://github.com/jsdelivr/data.jsdelivr.com)<br />\n\n<a name=\"433531fd\"></a>\n## 结语\n\n<br />以上，就是目前我能想到的应对 `jsdelivr` 缓存问题的所有方法了，总结如下：<br />\n\n- 直接使用本地引入（简单粗暴）\n- 使用其他 云储存服务 来加速（可能会收费）\n- 使用版本号的方式来引入（直接好用）\n- `purge` 刷新缓存（似乎也不太稳定）\n",
    "body_draft": "---<br />title: Vue基于html2canvas实现HTML页面生成为图片并下载的功能及清晰度优化<br />tags:<br />  - CSS<br />categories:<br />  - - 前端<br />    - 前端笔记<br />description: 在Vue中基于html2canvas和Canvas2Image实现HTML页面生成为图片并下载的功能，并解决了一些文本丢失或者图片加载不全的问题，跨域配置，以及清晰度优化等等。<br />keywords: html2canvas，HTML页面生成为图片，下载，图片加载不全，文本丢失<br />top_img: 'https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg'<br />cover: 'https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20201113115021.png'<br />abbrlink: 558885cd<br />date: 2020-11-13 11:36:33<br />updated: 2020-11-13 11:36:33<br />---<br />\n\n<a name=\"kurLP\"></a>\n## 前言\nhexo 博客目前最常用的加速方案应该就是使用 `jsdelivr` + `github` 的方式了，免费还好用，我的博客的图片也基本上是使用了这种方式 。<br />\n<br />关于如何使用 `jsdelivr` 来加速 `hexo` 博客我已经不想再赘述了。<br />\n<br />如果你对此不太了解，你可以参考：[优雅使用 jsdeliver 加速文件](https://www.antmoe.com/posts/e33d1c55/index.html)<br />\n\n<a name=\"58ad486f\"></a>\n## 缓存问题\n\n<br />因为 CSS 样式，随着博客的更新，可能经常调整，所以我需要经常改动和发布后实时预览线上环境是否和我测试环境一致，所以我会选择 `完全忽略该版本或使用“最新”加载最新版本` 这样的方式<br />\n\n```\nhttps://cdn.jsdelivr.net/gh/jquery/jquery@latest/dist/jquery.min.js\nhttps://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js\n```\n\n<br />我在尝试使用 `jsdelivr` 来加速我博客引入的自定义的 CSS 文件时，遇到了这样的问题：<br />\n\n- 第一次上传可以正常引入文件\n- 随后我对 CSS 的样式再次进行了修改，上传到 github 仓库，引入失败（确切的说，引入的文件并没有更新，仍然是我第一次提交的内容）\n- 此后，通过 `jsdelivr` 加速的文件，一直没有刷新成为我的最新版本。\n- 这让我的博客无法立即更新线上环境的样式。\n\n\n<br />在使用这种方法的时候，我们使用的 `latest` 这个 tags，官网上说，在引用 CDN 的时候版本号可以省略，但经过尝试，发现不带版本号并不会指向正确的版本，甚至有些资源文件会报 404，因为这部分资源文件回滚以后发现还是没有，所以就会出现上面的情况，我最先想到的还是把这个版本号固定下来，这样就不用每次都去修改配置文件，这样又引入一个新问题，即：每次部署的时候都要先删除远程的 latest，这实在是让人有点烦躁。<br />\n\n<a name=\"81c1dff6\"></a>\n## 解决办法\n\n\n<a name=\"8a1f2bfa\"></a>\n### 本地引入\n\n<br />{% note danger %}<br />\n<br />以下教程只针对 `butterfly` 主题，其他主题使用对应的本地引入 css 文件的方式应该即可。<br />\n<br />{% endnote %}<br />\n<br />在 `source` 文件夹下新建 `style` 文件夹用于存放我们的样式(不推荐使用 `CSS` 作为文件名 )，然后在配置文件中使用本地引入的方式即可：<br />\n\n```yaml\ninject:\n  head:\n    - <link rel=\"stylesheet\" href=\"/style/xxx.css\">\n  bottom:\n    # - <script src=\"xxxx\"></script>\n```\n\n<br />当然这种方法与我们的初衷似乎有些违背。<br />\n\n<a name=\"56f7a686\"></a>\n### 启用又拍云或者其他云储存服务\n\n<br />我目前使用的是 又拍云，把文件上传到 又拍云的 云储存 服务就好。实测是上传了可以实时刷新。<br />\n<br />关于如何使用 云储存 服务，这里暂时先不赘述。<br />\n\n<a name=\"467663e9\"></a>\n### jsdelivr 缓存\n\n<br />`jsdelive` 的缓存机制，我目前仍然不清楚，`jsdelivr` 官网是这么叙述的：<br />\n\n> We use a permanent S3 storage to ensure all files remain available even if GitHub goes down, or a repository or a release is deleted by its author. Files are fetched directly from GitHub only the first time, or when S3 goes down.\n> 大概意思：我们使用永久性的 S3 存储，以确保即使 GitHub 发生故障，或者其作者删除了存储库或发行版，所有文件仍然可用。仅在第一次或 S3 故障时才直接从 GitHub 提取文件。\n\n\n\n> If you use this feature and a file you requested is not available in the newest release, the link will keep working thanks to our version-fallback feature. We'll continue to serve the file from older release instead of failing with a 404 error.\n> 大概意思：如果您使用此功能，但您所请求的文件在最新版本中不可用，则由于我们的版本回退功能，该链接将继续有效。我们将继续提供较旧版本的文件，而不是因为 404 错误而失败。\n\n\n<br />我想这大概率就是在 `push` 了代码后，但是 `jsdelivr` 加速的文件没有更新的原因。<br />\n<br />当然 **第一种解决办法** 就是，你每改动一次代码，就 `releases` 一次，用更换版本号的形式来解决：<br />\n\n```\nhttps://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js\n```\n\n<br />但是或许还是有一些麻烦？因为你或许还要修改配置文件中对应的 CDN 地址。<br />\n<br />我想，既然 `jsdelivr` 提供了一个 `完全忽略该版本或使用“最新”加载最新版本` 这样的引入方式，那应该就是支持 `实时刷新` 的，如果请求的文件一直未获得刷新，我个人觉得可能是因为 CDN 节点上的缓存资源并没有刷新，就和浏览器的缓存同一个道理，在我们本地调试的时候，修改了样式却没有变化的时候，我们总是想到的是清理一下浏览器的缓存。<br />\n<br />如何清理 `jsdelivr` 缓存？<br />\n<br />把链接地址中的 `cdn` 换成 `purge` 即可清除指定文件的缓存，（经过测试，这个方法也是有时候好用有时候不好用）<br />\n\n```\nhttps://purge.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js\n```\n\n<br />但是官方好像并没有提到这一点，我找了很久的文档，官方是这么说的：<br />\n\n> jsDelivr 具有易于使用的 API，可以从缓存中清除文件并强制更新文件。当您发布新版本并要强制更新所有版本别名用户时，此功能很有用。\n> 为避免滥用，在发出电子邮件请求后（现在为[-dak@prospectone.io](mailto:dak@prospectone.io)）可以访问清除功能。\n\n\n\n<a name=\"daad12b7\"></a>\n## jsDelivr API\n\n<br />查看 CDN 上的 tags 和 versisons 列表。<br />\n<br />用法：<br />\n\n```\n/package/npm/:name\n - name: npm package name\n\n/package/gh/:user/:repo\n - user: GitHub username\n - repo: GitHub repository name\n```\n\n<br />示例：<br />\n\n```\nhttps://data.jsdelivr.com/v1/package/npm/jquery\n\n//=>\n{\n    \"tags\": {\n        \"beta\": \"3.2.1\",\n        \"latest\": \"3.2.1\"\n    },\n    \"versions\": [\n        \"3.2.1\",\n        \"3.2.0\",\n        \"3.1.1\",\n        ...\n    ]\n}\n```\n\n<br />更多的接口请直接访问：[jsDelivr API](https://github.com/jsdelivr/data.jsdelivr.com)<br />\n\n<a name=\"433531fd\"></a>\n## 结语\n\n<br />以上，就是目前我能想到的应对 `jsdelivr` 缓存问题的所有方法了，总结如下：<br />\n\n- 直接使用本地引入（简单粗暴）\n- 使用其他 云储存服务 来加速（可能会收费）\n- 使用版本号的方式来引入（直接好用）\n- `purge` 刷新缓存（似乎也不太稳定）\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-classic\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5B16%2C0%2C2%5D%2C%5B16%2C0%2C2%5D%5D%2C%22active%22%3Atrue%7D\"><p data-lake-id=\"b76bd679639ea540d2d308f3d15ec952\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>---</span></p><p data-lake-id=\"48574f122728792fd94f1ee9a133729e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">title: Vue基于html2canvas实现HTML页面生成为图片并下载的功能及清晰度优化</p><p data-lake-id=\"97fb090b0a456ea9f45bc154eefee478\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">tags:</p><p data-lake-id=\"535d7a2fb3a998eead171e9c85d14159\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">&nbsp; - CSS</p><p data-lake-id=\"cbadda342367af594a5707a20ebd82e0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">categories:</p><p data-lake-id=\"4372154b4af9f7fde3c6504a67279bf4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">&nbsp; - - 前端</p><p data-lake-id=\"70e38b467627df5c71c34da4de5cf48b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">&nbsp; &nbsp; - 前端笔记</p><p data-lake-id=\"f7092ad94dc3336ce26324d2e0b7031e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">description: 在Vue中基于html2canvas和Canvas2Image实现HTML页面生成为图片并下载的功能，并解决了一些文本丢失或者图片加载不全的问题，跨域配置，以及清晰度优化等等。</p><p data-lake-id=\"9121ece2d836b6dff61f35756138d4e3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">keywords: html2canvas，HTML页面生成为图片，下载，图片加载不全，文本丢失</p><p data-lake-id=\"7a9a24987539fed8099a46e90800064e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">top_img: 'https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg'</p><p data-lake-id=\"29b6d6d8c82d7cf0b0295dea5624d835\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">cover: 'https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20201113115021.png'</p><p data-lake-id=\"dbc830c05e37318759d62fac9bad359d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">abbrlink: 558885cd</p><p data-lake-id=\"2931616d8caab25e7ac9f1697cfaefb9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">date: 2020-11-13 11:36:33</p><p data-lake-id=\"7639c16d7036301a3da26ed85344ca9d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">updated: 2020-11-13 11:36:33</p><p data-lake-id=\"ab2b355f46e9f6874304d1fba96692f7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">---</p><p data-lake-id=\"18774af5e7da6032cdd95754eedcda8d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 data-lake-id=\"fa1e3b28bb335764f77f17602f484f1b\" id=\"kurLP\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">前言</h2><p data-lake-id=\"5d85c1d6573d3b614b7328be37fd6d8b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">hexo 博客目前最常用的加速方案应该就是使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">jsdelivr</code> + <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">github</code> 的方式了，免费还好用，我的博客的图片也基本上是使用了这种方式 。</p><p data-lake-id=\"6fdb7b17578fccfdcabc152f1137a08c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"8bdff4036230a51b29019bdf218f5ea9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">关于如何使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">jsdelivr</code> 来加速 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">hexo</code> 博客我已经不想再赘述了。</p><p data-lake-id=\"b205ccc304136638e134ab4dc5b45ddc\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"b8a0a2e0e58e2a9650642c75431adce9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">如果你对此不太了解，你可以参考：<a href=\"https://www.antmoe.com/posts/e33d1c55/index.html\" target=\"_blank\" one-link-mark=\"yes\">优雅使用 jsdeliver 加速文件</a></p><p data-lake-id=\"4768bb23a7696dfbd269009ee6c417e5\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"58ad486f\" data-lake-id=\"2b1d1459ba8fd84d010d0611b28525ee\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">缓存问题</h2><p data-lake-id=\"76c57049e0292d5691d19dd45e54b928\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"33e405a2caa587ce51b7a47dd1fffbe2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">因为 CSS 样式，随着博客的更新，可能经常调整，所以我需要经常改动和发布后实时预览线上环境是否和我测试环境一致，所以我会选择 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">完全忽略该版本或使用“最新”加载最新版本</code> 这样的方式</p><p data-lake-id=\"3073a82764560cef2208af7751807d9f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"166a752e\" data-language=\"plain\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https://cdn.jsdelivr.net/gh/jquery/jquery@latest/dist/jquery.min.js\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</span></span></pre></div></div></div><p data-lake-id=\"ff148547e86381a11da73a889b5883c8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"d549344a284cbc4310e3d108ddf2059d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我在尝试使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">jsdelivr</code> 来加速我博客引入的自定义的 CSS 文件时，遇到了这样的问题：</p><p data-lake-id=\"7652703b73ed70a3161acc9782b30236\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul data-lake-id=\"8260619d183ebd813dbaac64902c245f\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"aed130b9f876125794da4e922240f121\">第一次上传可以正常引入文件</li><li data-lake-id=\"29bea7e82d23ab4c6a03f0aaa4d0b687\">随后我对 CSS 的样式再次进行了修改，上传到 github 仓库，引入失败（确切的说，引入的文件并没有更新，仍然是我第一次提交的内容）</li><li data-lake-id=\"69eca709d370092bad8e03d9c69998d9\">此后，通过 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">jsdelivr</code> 加速的文件，一直没有刷新成为我的最新版本。</li><li data-lake-id=\"2412843980a879781497afa177da0b95\">这让我的博客无法立即更新线上环境的样式。</li></ul><p data-lake-id=\"bba4083bc10ec95642448bdd3576e976\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"30f064165165fe7d0dca6ceadd777a4e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">在使用这种方法的时候，我们使用的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">latest</code> 这个 tags，官网上说，在引用 CDN 的时候版本号可以省略，但经过尝试，发现不带版本号并不会指向正确的版本，甚至有些资源文件会报 404，因为这部分资源文件回滚以后发现还是没有，所以就会出现上面的情况，我最先想到的还是把这个版本号固定下来，这样就不用每次都去修改配置文件，这样又引入一个新问题，即：每次部署的时候都要先删除远程的 latest，这实在是让人有点烦躁。</p><p data-lake-id=\"6912534426d53ace3a242183b16a32e6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"81c1dff6\" data-lake-id=\"c8e0334619ebe05f3083a16fb49a10cb\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">解决办法</h2><p data-lake-id=\"359ccf798201d29df5aa34e090a8418c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"8a1f2bfa\" data-lake-id=\"4fc4d337fc6eb515bccc7b747224a8ea\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">本地引入</h3><p data-lake-id=\"d1c09cc2eff4c0c59f568457eb68b644\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"af58830dc8df12d06868e23827fc004b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">{% note danger %}</p><p data-lake-id=\"7cd097bc703ce4aada9a7876d328778e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"fe8c52d014946141ae7ddcfc1e693995\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">以下教程只针对 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">butterfly</code> 主题，其他主题使用对应的本地引入 css 文件的方式应该即可。</p><p data-lake-id=\"3fda282585bab16b28b64f3368b6f54e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"c79195d63f5bc67d848a53461f78321e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">{% endnote %}</p><p data-lake-id=\"2da7b964452603da6d458131df40be71\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"c040d5df4b079676f46e13ecef1f37d6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">在 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">source</code> 文件夹下新建 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">style</code> 文件夹用于存放我们的样式(不推荐使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">CSS</code> 作为文件名 )，然后在配置文件中使用本地引入的方式即可：</p><p data-lake-id=\"41396416bdb71e2b0c3381f355bb7a0d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"fd1fec01\" data-language=\"yaml\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">inject</span><span class=\"cm-meta\" style=\"color: rgb(31, 127, 154); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">:</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  head</span><span class=\"cm-meta\" style=\"color: rgb(31, 127, 154); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">:</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-meta\" style=\"color: rgb(31, 127, 154); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    - </span>&lt;link rel=<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"stylesheet\"</span> href=<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"/style/xxx.css\"</span>&gt;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  bottom</span><span class=\"cm-meta\" style=\"color: rgb(31, 127, 154); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">:</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># - &lt;script src=\"xxxx\"&gt;&lt;/script&gt;</span></span></span></pre></div></div></div><p data-lake-id=\"f1bb2ffccc2e6c09671a22eb08d94344\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"79cedd40465448851ae9697faa4ec45b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当然这种方法与我们的初衷似乎有些违背。</p><p data-lake-id=\"db05a64e8031b87ba46d373984e9e69f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"56f7a686\" data-lake-id=\"954d54e8891ab7589a3675b0af5e62b9\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">启用又拍云或者其他云储存服务</h3><p data-lake-id=\"29c7c64e0bd827f99710fe3f0c44a0bb\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"e17144389c92c8cd475612f00b0fc34c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我目前使用的是 又拍云，把文件上传到 又拍云的 云储存 服务就好。实测是上传了可以实时刷新。</p><p data-lake-id=\"a235ccbeb0ba9af0a68aa24941209ba3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"39df4c71256bde36c3a69e31447d0aab\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">关于如何使用 云储存 服务，这里暂时先不赘述。</p><p data-lake-id=\"24aff60277531a854c8ca56ee0608d61\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"467663e9\" data-lake-id=\"56a4209b8bf39c95a39331bb2c1e51c0\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">jsdelivr 缓存</h3><p data-lake-id=\"f9f229b9dc3c3b6e16efb2f7896264d5\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"dc0e6d9207ba4ca6a5c4590154c4ad9c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">jsdelive</code> 的缓存机制，我目前仍然不清楚，<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">jsdelivr</code> 官网是这么叙述的：</p><p data-lake-id=\"bdc15e183832e26224b509995663d327\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"652a9621162addb38a81b8cc119f8def\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">We use a permanent S3 storage to ensure all files remain available even if GitHub goes down, or a repository or a release is deleted by its author. Files are fetched directly from GitHub only the first time, or when S3 goes down.</p><p data-lake-id=\"c8e2c90ae4250ce39eb970ee49c6d588\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">大概意思：我们使用永久性的 S3 存储，以确保即使 GitHub 发生故障，或者其作者删除了存储库或发行版，所有文件仍然可用。仅在第一次或 S3 故障时才直接从 GitHub 提取文件。</p></blockquote><p data-lake-id=\"67bd1c9cdc667c4dec1db448a6d471b1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"b67874578e6303d420015c19e426c6e4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">If you use this feature and a file you requested is not available in the newest release, the link will keep working thanks to our version-fallback feature. We'll continue to serve the file from older release instead of failing with a 404 error.</p><p data-lake-id=\"8b2467bd483db592a6fced54fc07d074\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">大概意思：如果您使用此功能，但您所请求的文件在最新版本中不可用，则由于我们的版本回退功能，该链接将继续有效。我们将继续提供较旧版本的文件，而不是因为 404 错误而失败。</p></blockquote><p data-lake-id=\"ca80632c8bdb342908477793362a740b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"118cf4bd75da15dcf3a04e8fe5d69057\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我想这大概率就是在 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">push</code> 了代码后，但是 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">jsdelivr</code> 加速的文件没有更新的原因。</p><p data-lake-id=\"c05636da678f561de067c49ddd034625\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"54bd750e3208be2d8b761cdb84b4ddda\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当然 <strong>第一种解决办法</strong> 就是，你每改动一次代码，就 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">releases</code> 一次，用更换版本号的形式来解决：</p><p data-lake-id=\"7743c27ef4b2b81d8c119d069181ad9a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"af45879a\" data-language=\"plain\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js</span></span></pre></div></div></div><p data-lake-id=\"bb12d916b9a837018dffc0395804eea6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"5cf859450a51558326a341c1fed8196d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">但是或许还是有一些麻烦？因为你或许还要修改配置文件中对应的 CDN 地址。</p><p data-lake-id=\"04e16ac722e62b34dbdcc5502d793cf6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"6d47794bdd01378b0fe922828b8c9027\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我想，既然 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">jsdelivr</code> 提供了一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">完全忽略该版本或使用“最新”加载最新版本</code> 这样的引入方式，那应该就是支持 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">实时刷新</code> 的，如果请求的文件一直未获得刷新，我个人觉得可能是因为 CDN 节点上的缓存资源并没有刷新，就和浏览器的缓存同一个道理，在我们本地调试的时候，修改了样式却没有变化的时候，我们总是想到的是清理一下浏览器的缓存。</p><p data-lake-id=\"b4688996d883947bada179e8bb002a23\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"7f0ac9dfd66168417ed7ca83ce68dbdc\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">如何清理 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">jsdelivr</code> 缓存？</p><p data-lake-id=\"cde2aac8401c2be6a9a596dcd8c10121\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"dfa055cdca2f48f11a0c4413b560f79b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">把链接地址中的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">cdn</code> 换成 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">purge</code> 即可清除指定文件的缓存，（经过测试，这个方法也是有时候好用有时候不好用）</p><p data-lake-id=\"0b1d6ee7f9280f0283847888f8037ee1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"1126849a\" data-language=\"plain\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https://purge.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</span></span></pre></div></div></div><p data-lake-id=\"80f5e7b763acd5f8b5813ac9f5fda81d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"f896102bff94a2e1b103a66776cfb2e6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">但是官方好像并没有提到这一点，我找了很久的文档，官方是这么说的：</p><p data-lake-id=\"48b2f047929acfb7a8491c426fae9e37\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"padding-left: 1em; margin-top: 5px; margin-bottom: 5px; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"dac71db352afd4254688cc1ff4fad8f2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">jsDelivr 具有易于使用的 API，可以从缓存中清除文件并强制更新文件。当您发布新版本并要强制更新所有版本别名用户时，此功能很有用。</p><p data-lake-id=\"a10c0000d3c82dd8fa48c5760fcfbd23\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">为避免滥用，在发出电子邮件请求后（现在为<a href=\"mailto:dak@prospectone.io\" target=\"_blank\" one-link-mark=\"yes\">-dak@prospectone.io</a>）可以访问清除功能。</p></blockquote><p data-lake-id=\"4ee8f6c084839fc5f31db68d7e6fee6d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"daad12b7\" data-lake-id=\"d111531c50590e6a54eb70e968052f2d\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">jsDelivr API</h2><p data-lake-id=\"f90dad794e53295b8b80f1f93306b342\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"44d0dc3c136607b0133f2b9b41ea0ca2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">查看 CDN 上的 tags 和 versisons 列表。</p><p data-lake-id=\"35ade9ce288abd8c68260bcabf91de73\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"c2409ed2762fd6469687ce0ef8ad4c97\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">用法：</p><p data-lake-id=\"7906ab4af332d7651ba20f37d87bb216\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"12c5ab55\" data-language=\"plain\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/package/npm/:name\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"> - name: npm package name\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/package/gh/:user/:repo\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"> - user: GitHub username\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"> - repo: GitHub repository name</span></span></pre></div></div></div><p data-lake-id=\"4da51da1b5705ebc35cf9c3c9d502efc\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"33a310142398317a6942b71223e0170f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">示例：</p><p data-lake-id=\"7f9befcecdc47a3718b371fa5adf01ad\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"236894ed\" data-language=\"plain\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">https://data.jsdelivr.com/v1/package/npm/jquery\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">//=&gt;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">{\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    \"tags\": {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">        \"beta\": \"3.2.1\",\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">        \"latest\": \"3.2.1\"\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    },\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    \"versions\": [\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">        \"3.2.1\",\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">        \"3.2.0\",\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">        \"3.1.1\",\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">        ...\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    ]\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}</span></span></pre></div></div></div><p data-lake-id=\"79d5c4e63ddc37dcebd5ced91b453e04\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"d7e4f59b513a9f2bde7dfe13eb25478e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">更多的接口请直接访问：<a href=\"https://github.com/jsdelivr/data.jsdelivr.com\" target=\"_blank\" one-link-mark=\"yes\">jsDelivr API</a></p><p data-lake-id=\"1394b100a91506475f4a3ad9955f2ab7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"433531fd\" data-lake-id=\"6f4a256ead3b8cf1b007eba42cf4ffbf\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">结语</h2><p data-lake-id=\"487c983cf5d5374aec169a089dc7ec1b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"e2485ff5c9ba39244b9e71a2fae02ba3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">以上，就是目前我能想到的应对 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">jsdelivr</code> 缓存问题的所有方法了，总结如下：</p><p data-lake-id=\"f12f82701163ff3140ab825cb8d49387\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul data-lake-id=\"081e53d16b04f61ed833b0eebf6bbb87\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"941a97f655a8e381bd1ee441ee5f3d31\">直接使用本地引入（简单粗暴）</li><li data-lake-id=\"2348d10eebf0099dba4bb6bbd35407f1\">使用其他 云储存服务 来加速（可能会收费）</li><li data-lake-id=\"4eefe4b681ce600ee20503984f967173\">使用版本号的方式来引入（直接好用）</li><li data-lake-id=\"c8daf14958eb60b635bf1fdb6c0696fb\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">purge</code> 刷新缓存（似乎也不太稳定）</li></ul></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"classic\" /><p data-lake-id=\"b76bd679639ea540d2d308f3d15ec952\"><span>---</span></p><p data-lake-id=\"48574f122728792fd94f1ee9a133729e\">title: Vue基于html2canvas实现HTML页面生成为图片并下载的功能及清晰度优化</p><p data-lake-id=\"97fb090b0a456ea9f45bc154eefee478\">tags:</p><p data-lake-id=\"535d7a2fb3a998eead171e9c85d14159\">  - CSS</p><p data-lake-id=\"cbadda342367af594a5707a20ebd82e0\">categories:</p><p data-lake-id=\"4372154b4af9f7fde3c6504a67279bf4\">  - - 前端</p><p data-lake-id=\"70e38b467627df5c71c34da4de5cf48b\">    - 前端笔记</p><p data-lake-id=\"f7092ad94dc3336ce26324d2e0b7031e\">description: 在Vue中基于html2canvas和Canvas2Image实现HTML页面生成为图片并下载的功能，并解决了一些文本丢失或者图片加载不全的问题，跨域配置，以及清晰度优化等等。</p><p data-lake-id=\"9121ece2d836b6dff61f35756138d4e3\">keywords: html2canvas，HTML页面生成为图片，下载，图片加载不全，文本丢失</p><p data-lake-id=\"7a9a24987539fed8099a46e90800064e\">top_img: 'https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg'</p><p data-lake-id=\"29b6d6d8c82d7cf0b0295dea5624d835\">cover: 'https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20201113115021.png'</p><p data-lake-id=\"dbc830c05e37318759d62fac9bad359d\">abbrlink: 558885cd</p><p data-lake-id=\"2931616d8caab25e7ac9f1697cfaefb9\">date: 2020-11-13 11:36:33</p><p data-lake-id=\"7639c16d7036301a3da26ed85344ca9d\">updated: 2020-11-13 11:36:33</p><p data-lake-id=\"ab2b355f46e9f6874304d1fba96692f7\">---</p><p data-lake-id=\"18774af5e7da6032cdd95754eedcda8d\"><br /></p><h2 data-lake-id=\"fa1e3b28bb335764f77f17602f484f1b\" id=\"kurLP\">前言</h2><p data-lake-id=\"5d85c1d6573d3b614b7328be37fd6d8b\">hexo 博客目前最常用的加速方案应该就是使用 <code>jsdelivr</code> + <code>github</code> 的方式了，免费还好用，我的博客的图片也基本上是使用了这种方式 。</p><p data-lake-id=\"6fdb7b17578fccfdcabc152f1137a08c\"><br /></p><p data-lake-id=\"8bdff4036230a51b29019bdf218f5ea9\">关于如何使用 <code>jsdelivr</code> 来加速 <code>hexo</code> 博客我已经不想再赘述了。</p><p data-lake-id=\"b205ccc304136638e134ab4dc5b45ddc\"><br /></p><p data-lake-id=\"b8a0a2e0e58e2a9650642c75431adce9\">如果你对此不太了解，你可以参考：<a href=\"https://www.antmoe.com/posts/e33d1c55/index.html\" target=\"_blank\">优雅使用 jsdeliver 加速文件</a></p><p data-lake-id=\"4768bb23a7696dfbd269009ee6c417e5\"><br /></p><h2 id=\"58ad486f\" data-lake-id=\"2b1d1459ba8fd84d010d0611b28525ee\">缓存问题</h2><p data-lake-id=\"76c57049e0292d5691d19dd45e54b928\"><br /></p><p data-lake-id=\"33e405a2caa587ce51b7a47dd1fffbe2\">因为 CSS 样式，随着博客的更新，可能经常调整，所以我需要经常改动和发布后实时预览线上环境是否和我测试环境一致，所以我会选择 <code>完全忽略该版本或使用“最新”加载最新版本</code> 这样的方式</p><p data-lake-id=\"3073a82764560cef2208af7751807d9f\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22166a752e%22%2C%22code%22%3A%22https%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%40latest%2Fdist%2Fjquery.min.js%5Cnhttps%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%2Fdist%2Fjquery.min.js%22%7D\"></card><p data-lake-id=\"ff148547e86381a11da73a889b5883c8\"><br /></p><p data-lake-id=\"d549344a284cbc4310e3d108ddf2059d\">我在尝试使用 <code>jsdelivr</code> 来加速我博客引入的自定义的 CSS 文件时，遇到了这样的问题：</p><p data-lake-id=\"7652703b73ed70a3161acc9782b30236\"><br /></p><ul data-lake-id=\"8260619d183ebd813dbaac64902c245f\"><li data-lake-id=\"aed130b9f876125794da4e922240f121\">第一次上传可以正常引入文件</li><li data-lake-id=\"29bea7e82d23ab4c6a03f0aaa4d0b687\">随后我对 CSS 的样式再次进行了修改，上传到 github 仓库，引入失败（确切的说，引入的文件并没有更新，仍然是我第一次提交的内容）</li><li data-lake-id=\"69eca709d370092bad8e03d9c69998d9\">此后，通过 <code>jsdelivr</code> 加速的文件，一直没有刷新成为我的最新版本。</li><li data-lake-id=\"2412843980a879781497afa177da0b95\">这让我的博客无法立即更新线上环境的样式。</li></ul><p data-lake-id=\"bba4083bc10ec95642448bdd3576e976\"><br /></p><p data-lake-id=\"30f064165165fe7d0dca6ceadd777a4e\">在使用这种方法的时候，我们使用的 <code>latest</code> 这个 tags，官网上说，在引用 CDN 的时候版本号可以省略，但经过尝试，发现不带版本号并不会指向正确的版本，甚至有些资源文件会报 404，因为这部分资源文件回滚以后发现还是没有，所以就会出现上面的情况，我最先想到的还是把这个版本号固定下来，这样就不用每次都去修改配置文件，这样又引入一个新问题，即：每次部署的时候都要先删除远程的 latest，这实在是让人有点烦躁。</p><p data-lake-id=\"6912534426d53ace3a242183b16a32e6\"><br /></p><h2 id=\"81c1dff6\" data-lake-id=\"c8e0334619ebe05f3083a16fb49a10cb\">解决办法</h2><p data-lake-id=\"359ccf798201d29df5aa34e090a8418c\"><br /></p><h3 id=\"8a1f2bfa\" data-lake-id=\"4fc4d337fc6eb515bccc7b747224a8ea\">本地引入</h3><p data-lake-id=\"d1c09cc2eff4c0c59f568457eb68b644\"><br /></p><p data-lake-id=\"af58830dc8df12d06868e23827fc004b\">{% note danger %}</p><p data-lake-id=\"7cd097bc703ce4aada9a7876d328778e\"><br /></p><p data-lake-id=\"fe8c52d014946141ae7ddcfc1e693995\">以下教程只针对 <code>butterfly</code> 主题，其他主题使用对应的本地引入 css 文件的方式应该即可。</p><p data-lake-id=\"3fda282585bab16b28b64f3368b6f54e\"><br /></p><p data-lake-id=\"c79195d63f5bc67d848a53461f78321e\">{% endnote %}</p><p data-lake-id=\"2da7b964452603da6d458131df40be71\"><br /></p><p data-lake-id=\"c040d5df4b079676f46e13ecef1f37d6\">在 <code>source</code> 文件夹下新建 <code>style</code> 文件夹用于存放我们的样式(不推荐使用 <code>CSS</code> 作为文件名 )，然后在配置文件中使用本地引入的方式即可：</p><p data-lake-id=\"41396416bdb71e2b0c3381f355bb7a0d\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22fd1fec01%22%2C%22mode%22%3A%22yaml%22%2C%22code%22%3A%22inject%3A%5Cn%20%20head%3A%5Cn%20%20%20%20-%20%3Clink%20rel%3D%5C%22stylesheet%5C%22%20href%3D%5C%22%2Fstyle%2Fxxx.css%5C%22%3E%5Cn%20%20bottom%3A%5Cn%20%20%20%20%23%20-%20%3Cscript%20src%3D%5C%22xxxx%5C%22%3E%3C%2Fscript%3E%22%7D\"></card><p data-lake-id=\"f1bb2ffccc2e6c09671a22eb08d94344\"><br /></p><p data-lake-id=\"79cedd40465448851ae9697faa4ec45b\">当然这种方法与我们的初衷似乎有些违背。</p><p data-lake-id=\"db05a64e8031b87ba46d373984e9e69f\"><br /></p><h3 id=\"56f7a686\" data-lake-id=\"954d54e8891ab7589a3675b0af5e62b9\">启用又拍云或者其他云储存服务</h3><p data-lake-id=\"29c7c64e0bd827f99710fe3f0c44a0bb\"><br /></p><p data-lake-id=\"e17144389c92c8cd475612f00b0fc34c\">我目前使用的是 又拍云，把文件上传到 又拍云的 云储存 服务就好。实测是上传了可以实时刷新。</p><p data-lake-id=\"a235ccbeb0ba9af0a68aa24941209ba3\"><br /></p><p data-lake-id=\"39df4c71256bde36c3a69e31447d0aab\">关于如何使用 云储存 服务，这里暂时先不赘述。</p><p data-lake-id=\"24aff60277531a854c8ca56ee0608d61\"><br /></p><h3 id=\"467663e9\" data-lake-id=\"56a4209b8bf39c95a39331bb2c1e51c0\">jsdelivr 缓存</h3><p data-lake-id=\"f9f229b9dc3c3b6e16efb2f7896264d5\"><br /></p><p data-lake-id=\"dc0e6d9207ba4ca6a5c4590154c4ad9c\"><code>jsdelive</code> 的缓存机制，我目前仍然不清楚，<code>jsdelivr</code> 官网是这么叙述的：</p><p data-lake-id=\"bdc15e183832e26224b509995663d327\"><br /></p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"652a9621162addb38a81b8cc119f8def\">We use a permanent S3 storage to ensure all files remain available even if GitHub goes down, or a repository or a release is deleted by its author. Files are fetched directly from GitHub only the first time, or when S3 goes down.</p><p data-lake-id=\"c8e2c90ae4250ce39eb970ee49c6d588\">大概意思：我们使用永久性的 S3 存储，以确保即使 GitHub 发生故障，或者其作者删除了存储库或发行版，所有文件仍然可用。仅在第一次或 S3 故障时才直接从 GitHub 提取文件。</p></blockquote><p data-lake-id=\"67bd1c9cdc667c4dec1db448a6d471b1\"><br /></p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"b67874578e6303d420015c19e426c6e4\">If you use this feature and a file you requested is not available in the newest release, the link will keep working thanks to our version-fallback feature. We'll continue to serve the file from older release instead of failing with a 404 error.</p><p data-lake-id=\"8b2467bd483db592a6fced54fc07d074\">大概意思：如果您使用此功能，但您所请求的文件在最新版本中不可用，则由于我们的版本回退功能，该链接将继续有效。我们将继续提供较旧版本的文件，而不是因为 404 错误而失败。</p></blockquote><p data-lake-id=\"ca80632c8bdb342908477793362a740b\"><br /></p><p data-lake-id=\"118cf4bd75da15dcf3a04e8fe5d69057\">我想这大概率就是在 <code>push</code> 了代码后，但是 <code>jsdelivr</code> 加速的文件没有更新的原因。</p><p data-lake-id=\"c05636da678f561de067c49ddd034625\"><br /></p><p data-lake-id=\"54bd750e3208be2d8b761cdb84b4ddda\">当然 <strong>第一种解决办法</strong> 就是，你每改动一次代码，就 <code>releases</code> 一次，用更换版本号的形式来解决：</p><p data-lake-id=\"7743c27ef4b2b81d8c119d069181ad9a\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22af45879a%22%2C%22code%22%3A%22https%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%403.2.1%2Fdist%2Fjquery.min.js%22%7D\"></card><p data-lake-id=\"bb12d916b9a837018dffc0395804eea6\"><br /></p><p data-lake-id=\"5cf859450a51558326a341c1fed8196d\">但是或许还是有一些麻烦？因为你或许还要修改配置文件中对应的 CDN 地址。</p><p data-lake-id=\"04e16ac722e62b34dbdcc5502d793cf6\"><br /></p><p data-lake-id=\"6d47794bdd01378b0fe922828b8c9027\">我想，既然 <code>jsdelivr</code> 提供了一个 <code>完全忽略该版本或使用“最新”加载最新版本</code> 这样的引入方式，那应该就是支持 <code>实时刷新</code> 的，如果请求的文件一直未获得刷新，我个人觉得可能是因为 CDN 节点上的缓存资源并没有刷新，就和浏览器的缓存同一个道理，在我们本地调试的时候，修改了样式却没有变化的时候，我们总是想到的是清理一下浏览器的缓存。</p><p data-lake-id=\"b4688996d883947bada179e8bb002a23\"><br /></p><p data-lake-id=\"7f0ac9dfd66168417ed7ca83ce68dbdc\">如何清理 <code>jsdelivr</code> 缓存？</p><p data-lake-id=\"cde2aac8401c2be6a9a596dcd8c10121\"><br /></p><p data-lake-id=\"dfa055cdca2f48f11a0c4413b560f79b\">把链接地址中的 <code>cdn</code> 换成 <code>purge</code> 即可清除指定文件的缓存，（经过测试，这个方法也是有时候好用有时候不好用）</p><p data-lake-id=\"0b1d6ee7f9280f0283847888f8037ee1\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%221126849a%22%2C%22code%22%3A%22https%3A%2F%2Fpurge.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%2Fdist%2Fjquery.min.js%22%7D\"></card><p data-lake-id=\"80f5e7b763acd5f8b5813ac9f5fda81d\"><br /></p><p data-lake-id=\"f896102bff94a2e1b103a66776cfb2e6\">但是官方好像并没有提到这一点，我找了很久的文档，官方是这么说的：</p><p data-lake-id=\"48b2f047929acfb7a8491c426fae9e37\"><br /></p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"dac71db352afd4254688cc1ff4fad8f2\">jsDelivr 具有易于使用的 API，可以从缓存中清除文件并强制更新文件。当您发布新版本并要强制更新所有版本别名用户时，此功能很有用。</p><p data-lake-id=\"a10c0000d3c82dd8fa48c5760fcfbd23\">为避免滥用，在发出电子邮件请求后（现在为<a href=\"mailto:dak@prospectone.io\" target=\"_blank\">-dak@prospectone.io</a>）可以访问清除功能。</p></blockquote><p data-lake-id=\"4ee8f6c084839fc5f31db68d7e6fee6d\"><br /></p><h2 id=\"daad12b7\" data-lake-id=\"d111531c50590e6a54eb70e968052f2d\">jsDelivr API</h2><p data-lake-id=\"f90dad794e53295b8b80f1f93306b342\"><br /></p><p data-lake-id=\"44d0dc3c136607b0133f2b9b41ea0ca2\">查看 CDN 上的 tags 和 versisons 列表。</p><p data-lake-id=\"35ade9ce288abd8c68260bcabf91de73\"><br /></p><p data-lake-id=\"c2409ed2762fd6469687ce0ef8ad4c97\">用法：</p><p data-lake-id=\"7906ab4af332d7651ba20f37d87bb216\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2212c5ab55%22%2C%22code%22%3A%22%2Fpackage%2Fnpm%2F%3Aname%5Cn%20-%20name%3A%20npm%20package%20name%5Cn%5Cn%2Fpackage%2Fgh%2F%3Auser%2F%3Arepo%5Cn%20-%20user%3A%20GitHub%20username%5Cn%20-%20repo%3A%20GitHub%20repository%20name%22%7D\"></card><p data-lake-id=\"4da51da1b5705ebc35cf9c3c9d502efc\"><br /></p><p data-lake-id=\"33a310142398317a6942b71223e0170f\">示例：</p><p data-lake-id=\"7f9befcecdc47a3718b371fa5adf01ad\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22236894ed%22%2C%22code%22%3A%22https%3A%2F%2Fdata.jsdelivr.com%2Fv1%2Fpackage%2Fnpm%2Fjquery%5Cn%5Cn%2F%2F%3D%3E%5Cn%7B%5Cn%20%20%20%20%5C%22tags%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22beta%5C%22%3A%20%5C%223.2.1%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22latest%5C%22%3A%20%5C%223.2.1%5C%22%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%5C%22versions%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%5C%223.2.1%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%223.2.0%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%223.1.1%5C%22%2C%5Cn%20%20%20%20%20%20%20%20...%5Cn%20%20%20%20%5D%5Cn%7D%22%7D\"></card><p data-lake-id=\"79d5c4e63ddc37dcebd5ced91b453e04\"><br /></p><p data-lake-id=\"d7e4f59b513a9f2bde7dfe13eb25478e\">更多的接口请直接访问：<a href=\"https://github.com/jsdelivr/data.jsdelivr.com\" target=\"_blank\">jsDelivr API</a></p><p data-lake-id=\"1394b100a91506475f4a3ad9955f2ab7\"><br /></p><h2 id=\"433531fd\" data-lake-id=\"6f4a256ead3b8cf1b007eba42cf4ffbf\">结语</h2><p data-lake-id=\"487c983cf5d5374aec169a089dc7ec1b\"><br /></p><p data-lake-id=\"e2485ff5c9ba39244b9e71a2fae02ba3\">以上，就是目前我能想到的应对 <code>jsdelivr</code> 缓存问题的所有方法了，总结如下：</p><p data-lake-id=\"f12f82701163ff3140ab825cb8d49387\"><br /></p><ul data-lake-id=\"081e53d16b04f61ed833b0eebf6bbb87\"><li data-lake-id=\"941a97f655a8e381bd1ee441ee5f3d31\">直接使用本地引入（简单粗暴）</li><li data-lake-id=\"2348d10eebf0099dba4bb6bbd35407f1\">使用其他 云储存服务 来加速（可能会收费）</li><li data-lake-id=\"4eefe4b681ce600ee20503984f967173\">使用版本号的方式来引入（直接好用）</li><li data-lake-id=\"c8daf14958eb60b635bf1fdb6c0696fb\"><code>purge</code> 刷新缓存（似乎也不太稳定）</li></ul>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"classic\" /><p data-lake-id=\"b76bd679639ea540d2d308f3d15ec952\"><span>---</span></p><p data-lake-id=\"48574f122728792fd94f1ee9a133729e\">title: Vue基于html2canvas实现HTML页面生成为图片并下载的功能及清晰度优化</p><p data-lake-id=\"97fb090b0a456ea9f45bc154eefee478\">tags:</p><p data-lake-id=\"535d7a2fb3a998eead171e9c85d14159\">  - CSS</p><p data-lake-id=\"cbadda342367af594a5707a20ebd82e0\">categories:</p><p data-lake-id=\"4372154b4af9f7fde3c6504a67279bf4\">  - - 前端</p><p data-lake-id=\"70e38b467627df5c71c34da4de5cf48b\">    - 前端笔记</p><p data-lake-id=\"f7092ad94dc3336ce26324d2e0b7031e\">description: 在Vue中基于html2canvas和Canvas2Image实现HTML页面生成为图片并下载的功能，并解决了一些文本丢失或者图片加载不全的问题，跨域配置，以及清晰度优化等等。</p><p data-lake-id=\"9121ece2d836b6dff61f35756138d4e3\">keywords: html2canvas，HTML页面生成为图片，下载，图片加载不全，文本丢失</p><p data-lake-id=\"7a9a24987539fed8099a46e90800064e\">top_img: 'https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20200717233539.jpg'</p><p data-lake-id=\"29b6d6d8c82d7cf0b0295dea5624d835\">cover: 'https://cdn.jsdelivr.net/gh/constown/HexoStaticFile/img/20201113115021.png'</p><p data-lake-id=\"dbc830c05e37318759d62fac9bad359d\">abbrlink: 558885cd</p><p data-lake-id=\"2931616d8caab25e7ac9f1697cfaefb9\">date: 2020-11-13 11:36:33</p><p data-lake-id=\"7639c16d7036301a3da26ed85344ca9d\">updated: 2020-11-13 11:36:33</p><p data-lake-id=\"ab2b355f46e9f6874304d1fba96692f7\">---</p><p data-lake-id=\"18774af5e7da6032cdd95754eedcda8d\"><br /></p><h2 data-lake-id=\"fa1e3b28bb335764f77f17602f484f1b\" id=\"kurLP\">前言</h2><p data-lake-id=\"5d85c1d6573d3b614b7328be37fd6d8b\">hexo 博客目前最常用的加速方案应该就是使用 <code>jsdelivr</code> + <code>github</code> 的方式了，免费还好用，我的博客的图片也基本上是使用了这种方式 。</p><p data-lake-id=\"6fdb7b17578fccfdcabc152f1137a08c\"><br /></p><p data-lake-id=\"8bdff4036230a51b29019bdf218f5ea9\">关于如何使用 <code>jsdelivr</code> 来加速 <code>hexo</code> 博客我已经不想再赘述了。</p><p data-lake-id=\"b205ccc304136638e134ab4dc5b45ddc\"><br /></p><p data-lake-id=\"b8a0a2e0e58e2a9650642c75431adce9\">如果你对此不太了解，你可以参考：<a href=\"https://www.antmoe.com/posts/e33d1c55/index.html\" target=\"_blank\">优雅使用 jsdeliver 加速文件</a></p><p data-lake-id=\"4768bb23a7696dfbd269009ee6c417e5\"><br /></p><h2 id=\"58ad486f\" data-lake-id=\"2b1d1459ba8fd84d010d0611b28525ee\">缓存问题</h2><p data-lake-id=\"76c57049e0292d5691d19dd45e54b928\"><br /></p><p data-lake-id=\"33e405a2caa587ce51b7a47dd1fffbe2\">因为 CSS 样式，随着博客的更新，可能经常调整，所以我需要经常改动和发布后实时预览线上环境是否和我测试环境一致，所以我会选择 <code>完全忽略该版本或使用“最新”加载最新版本</code> 这样的方式</p><p data-lake-id=\"3073a82764560cef2208af7751807d9f\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22166a752e%22%2C%22code%22%3A%22https%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%40latest%2Fdist%2Fjquery.min.js%5Cnhttps%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%2Fdist%2Fjquery.min.js%22%7D\"></card><p data-lake-id=\"ff148547e86381a11da73a889b5883c8\"><br /></p><p data-lake-id=\"d549344a284cbc4310e3d108ddf2059d\">我在尝试使用 <code>jsdelivr</code> 来加速我博客引入的自定义的 CSS 文件时，遇到了这样的问题：</p><p data-lake-id=\"7652703b73ed70a3161acc9782b30236\"><br /></p><ul data-lake-id=\"8260619d183ebd813dbaac64902c245f\"><li data-lake-id=\"aed130b9f876125794da4e922240f121\">第一次上传可以正常引入文件</li><li data-lake-id=\"29bea7e82d23ab4c6a03f0aaa4d0b687\">随后我对 CSS 的样式再次进行了修改，上传到 github 仓库，引入失败（确切的说，引入的文件并没有更新，仍然是我第一次提交的内容）</li><li data-lake-id=\"69eca709d370092bad8e03d9c69998d9\">此后，通过 <code>jsdelivr</code> 加速的文件，一直没有刷新成为我的最新版本。</li><li data-lake-id=\"2412843980a879781497afa177da0b95\">这让我的博客无法立即更新线上环境的样式。</li></ul><p data-lake-id=\"bba4083bc10ec95642448bdd3576e976\"><br /></p><p data-lake-id=\"30f064165165fe7d0dca6ceadd777a4e\">在使用这种方法的时候，我们使用的 <code>latest</code> 这个 tags，官网上说，在引用 CDN 的时候版本号可以省略，但经过尝试，发现不带版本号并不会指向正确的版本，甚至有些资源文件会报 404，因为这部分资源文件回滚以后发现还是没有，所以就会出现上面的情况，我最先想到的还是把这个版本号固定下来，这样就不用每次都去修改配置文件，这样又引入一个新问题，即：每次部署的时候都要先删除远程的 latest，这实在是让人有点烦躁。</p><p data-lake-id=\"6912534426d53ace3a242183b16a32e6\"><br /></p><h2 id=\"81c1dff6\" data-lake-id=\"c8e0334619ebe05f3083a16fb49a10cb\">解决办法</h2><p data-lake-id=\"359ccf798201d29df5aa34e090a8418c\"><br /></p><h3 id=\"8a1f2bfa\" data-lake-id=\"4fc4d337fc6eb515bccc7b747224a8ea\">本地引入</h3><p data-lake-id=\"d1c09cc2eff4c0c59f568457eb68b644\"><br /></p><p data-lake-id=\"af58830dc8df12d06868e23827fc004b\">{% note danger %}</p><p data-lake-id=\"7cd097bc703ce4aada9a7876d328778e\"><br /></p><p data-lake-id=\"fe8c52d014946141ae7ddcfc1e693995\">以下教程只针对 <code>butterfly</code> 主题，其他主题使用对应的本地引入 css 文件的方式应该即可。</p><p data-lake-id=\"3fda282585bab16b28b64f3368b6f54e\"><br /></p><p data-lake-id=\"c79195d63f5bc67d848a53461f78321e\">{% endnote %}</p><p data-lake-id=\"2da7b964452603da6d458131df40be71\"><br /></p><p data-lake-id=\"c040d5df4b079676f46e13ecef1f37d6\">在 <code>source</code> 文件夹下新建 <code>style</code> 文件夹用于存放我们的样式(不推荐使用 <code>CSS</code> 作为文件名 )，然后在配置文件中使用本地引入的方式即可：</p><p data-lake-id=\"41396416bdb71e2b0c3381f355bb7a0d\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22fd1fec01%22%2C%22mode%22%3A%22yaml%22%2C%22code%22%3A%22inject%3A%5Cn%20%20head%3A%5Cn%20%20%20%20-%20%3Clink%20rel%3D%5C%22stylesheet%5C%22%20href%3D%5C%22%2Fstyle%2Fxxx.css%5C%22%3E%5Cn%20%20bottom%3A%5Cn%20%20%20%20%23%20-%20%3Cscript%20src%3D%5C%22xxxx%5C%22%3E%3C%2Fscript%3E%22%7D\"></card><p data-lake-id=\"f1bb2ffccc2e6c09671a22eb08d94344\"><br /></p><p data-lake-id=\"79cedd40465448851ae9697faa4ec45b\">当然这种方法与我们的初衷似乎有些违背。</p><p data-lake-id=\"db05a64e8031b87ba46d373984e9e69f\"><br /></p><h3 id=\"56f7a686\" data-lake-id=\"954d54e8891ab7589a3675b0af5e62b9\">启用又拍云或者其他云储存服务</h3><p data-lake-id=\"29c7c64e0bd827f99710fe3f0c44a0bb\"><br /></p><p data-lake-id=\"e17144389c92c8cd475612f00b0fc34c\">我目前使用的是 又拍云，把文件上传到 又拍云的 云储存 服务就好。实测是上传了可以实时刷新。</p><p data-lake-id=\"a235ccbeb0ba9af0a68aa24941209ba3\"><br /></p><p data-lake-id=\"39df4c71256bde36c3a69e31447d0aab\">关于如何使用 云储存 服务，这里暂时先不赘述。</p><p data-lake-id=\"24aff60277531a854c8ca56ee0608d61\"><br /></p><h3 id=\"467663e9\" data-lake-id=\"56a4209b8bf39c95a39331bb2c1e51c0\">jsdelivr 缓存</h3><p data-lake-id=\"f9f229b9dc3c3b6e16efb2f7896264d5\"><br /></p><p data-lake-id=\"dc0e6d9207ba4ca6a5c4590154c4ad9c\"><code>jsdelive</code> 的缓存机制，我目前仍然不清楚，<code>jsdelivr</code> 官网是这么叙述的：</p><p data-lake-id=\"bdc15e183832e26224b509995663d327\"><br /></p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"652a9621162addb38a81b8cc119f8def\">We use a permanent S3 storage to ensure all files remain available even if GitHub goes down, or a repository or a release is deleted by its author. Files are fetched directly from GitHub only the first time, or when S3 goes down.</p><p data-lake-id=\"c8e2c90ae4250ce39eb970ee49c6d588\">大概意思：我们使用永久性的 S3 存储，以确保即使 GitHub 发生故障，或者其作者删除了存储库或发行版，所有文件仍然可用。仅在第一次或 S3 故障时才直接从 GitHub 提取文件。</p></blockquote><p data-lake-id=\"67bd1c9cdc667c4dec1db448a6d471b1\"><br /></p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"b67874578e6303d420015c19e426c6e4\">If you use this feature and a file you requested is not available in the newest release, the link will keep working thanks to our version-fallback feature. We'll continue to serve the file from older release instead of failing with a 404 error.</p><p data-lake-id=\"8b2467bd483db592a6fced54fc07d074\">大概意思：如果您使用此功能，但您所请求的文件在最新版本中不可用，则由于我们的版本回退功能，该链接将继续有效。我们将继续提供较旧版本的文件，而不是因为 404 错误而失败。</p></blockquote><p data-lake-id=\"ca80632c8bdb342908477793362a740b\"><br /></p><p data-lake-id=\"118cf4bd75da15dcf3a04e8fe5d69057\">我想这大概率就是在 <code>push</code> 了代码后，但是 <code>jsdelivr</code> 加速的文件没有更新的原因。</p><p data-lake-id=\"c05636da678f561de067c49ddd034625\"><br /></p><p data-lake-id=\"54bd750e3208be2d8b761cdb84b4ddda\">当然 <strong>第一种解决办法</strong> 就是，你每改动一次代码，就 <code>releases</code> 一次，用更换版本号的形式来解决：</p><p data-lake-id=\"7743c27ef4b2b81d8c119d069181ad9a\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22af45879a%22%2C%22code%22%3A%22https%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%403.2.1%2Fdist%2Fjquery.min.js%22%7D\"></card><p data-lake-id=\"bb12d916b9a837018dffc0395804eea6\"><br /></p><p data-lake-id=\"5cf859450a51558326a341c1fed8196d\">但是或许还是有一些麻烦？因为你或许还要修改配置文件中对应的 CDN 地址。</p><p data-lake-id=\"04e16ac722e62b34dbdcc5502d793cf6\"><br /></p><p data-lake-id=\"6d47794bdd01378b0fe922828b8c9027\">我想，既然 <code>jsdelivr</code> 提供了一个 <code>完全忽略该版本或使用“最新”加载最新版本</code> 这样的引入方式，那应该就是支持 <code>实时刷新</code> 的，如果请求的文件一直未获得刷新，我个人觉得可能是因为 CDN 节点上的缓存资源并没有刷新，就和浏览器的缓存同一个道理，在我们本地调试的时候，修改了样式却没有变化的时候，我们总是想到的是清理一下浏览器的缓存。</p><p data-lake-id=\"b4688996d883947bada179e8bb002a23\"><br /></p><p data-lake-id=\"7f0ac9dfd66168417ed7ca83ce68dbdc\">如何清理 <code>jsdelivr</code> 缓存？</p><p data-lake-id=\"cde2aac8401c2be6a9a596dcd8c10121\"><br /></p><p data-lake-id=\"dfa055cdca2f48f11a0c4413b560f79b\">把链接地址中的 <code>cdn</code> 换成 <code>purge</code> 即可清除指定文件的缓存，（经过测试，这个方法也是有时候好用有时候不好用）</p><p data-lake-id=\"0b1d6ee7f9280f0283847888f8037ee1\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%221126849a%22%2C%22code%22%3A%22https%3A%2F%2Fpurge.jsdelivr.net%2Fgh%2Fjquery%2Fjquery%2Fdist%2Fjquery.min.js%22%7D\"></card><p data-lake-id=\"80f5e7b763acd5f8b5813ac9f5fda81d\"><br /></p><p data-lake-id=\"f896102bff94a2e1b103a66776cfb2e6\">但是官方好像并没有提到这一点，我找了很久的文档，官方是这么说的：</p><p data-lake-id=\"48b2f047929acfb7a8491c426fae9e37\"><br /></p><blockquote style=\"padding-left: 1em;\"><p data-lake-id=\"dac71db352afd4254688cc1ff4fad8f2\">jsDelivr 具有易于使用的 API，可以从缓存中清除文件并强制更新文件。当您发布新版本并要强制更新所有版本别名用户时，此功能很有用。</p><p data-lake-id=\"a10c0000d3c82dd8fa48c5760fcfbd23\">为避免滥用，在发出电子邮件请求后（现在为<a href=\"mailto:dak@prospectone.io\" target=\"_blank\">-dak@prospectone.io</a>）可以访问清除功能。</p></blockquote><p data-lake-id=\"4ee8f6c084839fc5f31db68d7e6fee6d\"><br /></p><h2 id=\"daad12b7\" data-lake-id=\"d111531c50590e6a54eb70e968052f2d\">jsDelivr API</h2><p data-lake-id=\"f90dad794e53295b8b80f1f93306b342\"><br /></p><p data-lake-id=\"44d0dc3c136607b0133f2b9b41ea0ca2\">查看 CDN 上的 tags 和 versisons 列表。</p><p data-lake-id=\"35ade9ce288abd8c68260bcabf91de73\"><br /></p><p data-lake-id=\"c2409ed2762fd6469687ce0ef8ad4c97\">用法：</p><p data-lake-id=\"7906ab4af332d7651ba20f37d87bb216\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2212c5ab55%22%2C%22code%22%3A%22%2Fpackage%2Fnpm%2F%3Aname%5Cn%20-%20name%3A%20npm%20package%20name%5Cn%5Cn%2Fpackage%2Fgh%2F%3Auser%2F%3Arepo%5Cn%20-%20user%3A%20GitHub%20username%5Cn%20-%20repo%3A%20GitHub%20repository%20name%22%7D\"></card><p data-lake-id=\"4da51da1b5705ebc35cf9c3c9d502efc\"><br /></p><p data-lake-id=\"33a310142398317a6942b71223e0170f\">示例：</p><p data-lake-id=\"7f9befcecdc47a3718b371fa5adf01ad\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22236894ed%22%2C%22code%22%3A%22https%3A%2F%2Fdata.jsdelivr.com%2Fv1%2Fpackage%2Fnpm%2Fjquery%5Cn%5Cn%2F%2F%3D%3E%5Cn%7B%5Cn%20%20%20%20%5C%22tags%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22beta%5C%22%3A%20%5C%223.2.1%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22latest%5C%22%3A%20%5C%223.2.1%5C%22%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%5C%22versions%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%5C%223.2.1%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%223.2.0%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%223.1.1%5C%22%2C%5Cn%20%20%20%20%20%20%20%20...%5Cn%20%20%20%20%5D%5Cn%7D%22%7D\"></card><p data-lake-id=\"79d5c4e63ddc37dcebd5ced91b453e04\"><br /></p><p data-lake-id=\"d7e4f59b513a9f2bde7dfe13eb25478e\">更多的接口请直接访问：<a href=\"https://github.com/jsdelivr/data.jsdelivr.com\" target=\"_blank\">jsDelivr API</a></p><p data-lake-id=\"1394b100a91506475f4a3ad9955f2ab7\"><br /></p><h2 id=\"433531fd\" data-lake-id=\"6f4a256ead3b8cf1b007eba42cf4ffbf\">结语</h2><p data-lake-id=\"487c983cf5d5374aec169a089dc7ec1b\"><br /></p><p data-lake-id=\"e2485ff5c9ba39244b9e71a2fae02ba3\">以上，就是目前我能想到的应对 <code>jsdelivr</code> 缓存问题的所有方法了，总结如下：</p><p data-lake-id=\"f12f82701163ff3140ab825cb8d49387\"><br /></p><ul data-lake-id=\"081e53d16b04f61ed833b0eebf6bbb87\"><li data-lake-id=\"941a97f655a8e381bd1ee441ee5f3d31\">直接使用本地引入（简单粗暴）</li><li data-lake-id=\"2348d10eebf0099dba4bb6bbd35407f1\">使用其他 云储存服务 来加速（可能会收费）</li><li data-lake-id=\"4eefe4b681ce600ee20503984f967173\">使用版本号的方式来引入（直接好用）</li><li data-lake-id=\"c8daf14958eb60b635bf1fdb6c0696fb\"><code>purge</code> 刷新缓存（似乎也不太稳定）</li></ul>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2020-12-29T02:04:38.000Z",
    "deleted_at": null,
    "created_at": "2020-12-29T02:03:36.000Z",
    "updated_at": "2020-12-29T02:04:39.000Z",
    "published_at": "2020-12-29T02:04:38.000Z",
    "first_published_at": "2020-12-29T02:04:38.000Z",
    "word_count": 1757,
    "cover": null,
    "description": "---title: Vue基于html2canvas实现HTML页面生成为图片并下载的功能及清晰度优化tags:  - CSScategories:  - - 前端    - 前端笔记description: 在Vue中基于html2canvas和Canvas2Image实现HTML页面生成为...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  }
]